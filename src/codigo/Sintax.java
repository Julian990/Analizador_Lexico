
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 03 22:33:49 COT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 03 22:33:49 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\052\000\002\004\005" +
    "\000\002\005\006\000\002\006\006\000\002\007\017\000" +
    "\002\024\003\000\002\024\003\000\002\010\010\000\002" +
    "\025\003\000\002\025\013\000\002\027\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\026\004\000\002\026\005\000\002\026\010\000" +
    "\002\011\003\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\005\000\002\011\004" +
    "\000\002\011\003\000\002\012\005\000\002\012\007\000" +
    "\002\012\007\000\002\012\006\000\002\012\006\000\002" +
    "\012\010\000\002\012\010\000\002\012\011\000\002\012" +
    "\011\000\002\013\010\000\002\015\011\000\002\022\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\006\000\002\022\007\000\002\016\015\000\002" +
    "\017\011\000\002\020\013\000\002\021\011\000\002\023" +
    "\012\000\002\023\011\000\002\014\005\000\002\014\004" +
    "\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\012\020\010\021\007\026\011\045\012\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\333\001\002" +
    "\000\020\011\324\014\055\015\054\016\245\025\246\026" +
    "\011\035\253\001\002\000\004\014\ufff8\001\002\000\004" +
    "\035\322\001\002\000\004\005\200\001\002\000\004\014" +
    "\ufff7\001\002\000\004\002\ufffe\001\002\000\004\021\047" +
    "\001\002\000\004\014\017\001\002\000\004\002\000\001" +
    "\002\000\004\035\020\001\002\000\004\005\021\001\002" +
    "\000\010\006\024\014\026\015\023\001\002\000\004\010" +
    "\045\001\002\000\004\035\042\001\002\000\012\006\ufff3" +
    "\010\ufff3\014\ufff3\015\ufff3\001\002\000\012\006\024\010" +
    "\ufff5\014\026\015\023\001\002\000\004\035\027\001\002" +
    "\000\006\006\031\013\030\001\002\000\012\006\ufff1\010" +
    "\ufff1\014\ufff1\015\ufff1\001\002\000\012\006\ufff2\010\ufff2" +
    "\014\ufff2\015\ufff2\001\002\000\010\006\024\014\026\015" +
    "\023\001\002\000\010\006\024\014\026\015\023\001\002" +
    "\000\010\006\024\014\026\015\023\001\002\000\010\006" +
    "\024\014\026\015\023\001\002\000\010\006\024\014\026" +
    "\015\023\001\002\000\010\006\024\014\026\015\023\001" +
    "\002\000\010\006\024\014\026\015\023\001\002\000\004" +
    "\010\ufff4\001\002\000\006\006\044\013\043\001\002\000" +
    "\012\006\uffef\010\uffef\014\uffef\015\uffef\001\002\000\012" +
    "\006\ufff0\010\ufff0\014\ufff0\015\ufff0\001\002\000\022\011" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\023\ufff6\025\ufff6\026\ufff6" +
    "\035\ufff6\001\002\000\006\014\055\015\054\001\002\000" +
    "\004\022\050\001\002\000\004\035\051\001\002\000\004" +
    "\010\052\001\002\000\006\014\ufffb\015\ufffb\001\002\000" +
    "\006\014\055\015\054\001\002\000\004\035\073\001\002" +
    "\000\006\030\056\035\057\001\002\000\004\035\071\001" +
    "\002\000\012\007\061\030\060\032\062\037\063\001\002" +
    "\000\004\007\070\001\002\000\024\011\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\001\002\000\004\036\066\001\002\000\004\036\064\001" +
    "\002\000\004\007\065\001\002\000\024\011\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\001\002\000\004\007\067\001\002\000\024\011\uffde" +
    "\014\uffde\015\uffde\016\uffde\021\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\001\002\000\024\011\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\001" +
    "\002\000\004\007\072\001\002\000\024\011\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\001\002\000\006\032\074\037\075\001\002\000\004" +
    "\012\104\001\002\000\004\012\076\001\002\000\006\012" +
    "\077\035\100\001\002\000\004\007\103\001\002\000\004" +
    "\012\101\001\002\000\004\007\102\001\002\000\024\011" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\001\002\000\024\011\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\001\002\000\006\012\105\035\106\001\002\000\004\007" +
    "\111\001\002\000\004\012\107\001\002\000\004\007\110" +
    "\001\002\000\024\011\uffd8\014\uffd8\015\uffd8\016\uffd8\021" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\001\002\000\024" +
    "\011\uffda\014\uffda\015\uffda\016\uffda\021\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\001\002\000\004\021\114\001\002" +
    "\000\006\021\007\045\012\001\002\000\004\035\115\001" +
    "\002\000\004\005\116\001\002\000\004\014\117\001\002" +
    "\000\004\035\120\001\002\000\004\013\121\001\002\000" +
    "\004\014\122\001\002\000\004\035\123\001\002\000\004" +
    "\006\124\001\002\000\004\010\125\001\002\000\004\035" +
    "\127\001\002\000\004\035\127\001\002\000\004\032\130" +
    "\001\002\000\004\035\131\001\002\000\004\007\132\001" +
    "\002\000\006\011\ufffa\035\ufffa\001\002\000\004\011\134" +
    "\001\002\000\006\021\ufff9\045\ufff9\001\002\000\004\023" +
    "\136\001\002\000\004\035\137\001\002\000\004\027\140" +
    "\001\002\000\004\035\141\001\002\000\004\007\142\001" +
    "\002\000\004\011\143\001\002\000\006\021\007\045\012" +
    "\001\002\000\004\023\145\001\002\000\004\035\146\001" +
    "\002\000\004\027\147\001\002\000\004\035\150\001\002" +
    "\000\004\007\151\001\002\000\004\011\152\001\002\000" +
    "\006\021\007\045\012\001\002\000\004\023\154\001\002" +
    "\000\004\035\155\001\002\000\004\027\156\001\002\000" +
    "\004\035\157\001\002\000\004\007\160\001\002\000\004" +
    "\011\161\001\002\000\006\021\007\045\012\001\002\000" +
    "\004\023\163\001\002\000\004\035\164\001\002\000\004" +
    "\027\165\001\002\000\004\035\166\001\002\000\004\007" +
    "\167\001\002\000\004\011\170\001\002\000\006\021\007" +
    "\045\012\001\002\000\004\026\011\001\002\000\004\023" +
    "\173\001\002\000\004\035\174\001\002\000\004\007\175" +
    "\001\002\000\004\011\176\001\002\000\004\011\177\001" +
    "\002\000\004\002\ufffd\001\002\000\006\014\203\035\202" +
    "\001\002\000\004\006\241\001\002\000\004\032\233\001" +
    "\002\000\004\035\204\001\002\000\004\032\205\001\002" +
    "\000\004\036\206\001\002\000\004\007\207\001\002\000" +
    "\006\035\212\040\210\001\002\000\006\006\uffd5\007\uffd5" +
    "\001\002\000\004\007\223\001\002\000\004\033\213\001" +
    "\002\000\012\012\215\035\217\036\214\040\216\001\002" +
    "\000\006\006\uffd3\007\uffd3\001\002\000\006\012\220\035" +
    "\221\001\002\000\006\006\uffd4\007\uffd4\001\002\000\006" +
    "\006\uffd2\007\uffd2\001\002\000\006\006\uffd1\007\uffd1\001" +
    "\002\000\004\012\222\001\002\000\006\006\uffd0\007\uffd0" +
    "\001\002\000\006\030\224\035\226\001\002\000\004\035" +
    "\232\001\002\000\004\006\uffcb\001\002\000\006\030\227" +
    "\037\230\001\002\000\004\006\uffc8\001\002\000\004\036" +
    "\231\001\002\000\004\006\uffc9\001\002\000\004\006\uffc7" +
    "\001\002\000\004\036\234\001\002\000\004\007\235\001" +
    "\002\000\006\035\212\040\210\001\002\000\004\007\237" +
    "\001\002\000\006\030\224\035\226\001\002\000\004\006" +
    "\uffca\001\002\000\004\010\242\001\002\000\016\014\055" +
    "\015\054\016\245\025\246\026\011\035\253\001\002\000" +
    "\016\011\uffe4\016\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\001\002\000\016\011\uffe1\016\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\001\002\000\004\005\310\001\002\000\004" +
    "\005\302\001\002\000\016\011\uffea\016\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\001\002\000\016\011\uffe6\016\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\001\002\000\016\011" +
    "\uffe8\016\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\001\002" +
    "\000\014\011\264\016\245\024\266\025\246\026\011\001" +
    "\002\000\004\032\255\001\002\000\016\011\uffeb\016\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\001\002\000\004\035" +
    "\256\001\002\000\004\027\257\001\002\000\004\035\260" +
    "\001\002\000\004\007\261\001\002\000\016\011\uffd7\016" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\001\002\000\016" +
    "\011\uffe5\016\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\001" +
    "\002\000\016\011\uffe2\016\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\001\002\000\020\002\uffcc\011\uffcc\016\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\001\002\000\016\011\uffe7" +
    "\016\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\001\002\000" +
    "\004\010\272\001\002\000\016\011\uffe9\016\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\001\002\000\004\024\266\001" +
    "\002\000\016\011\uffe3\016\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\001\002\000\016\014\055\015\054\016\245\025" +
    "\246\026\011\035\253\001\002\000\014\011\274\016\245" +
    "\024\266\025\246\026\011\001\002\000\004\025\275\001" +
    "\002\000\004\005\276\001\002\000\006\035\212\040\210" +
    "\001\002\000\004\006\300\001\002\000\004\007\301\001" +
    "\002\000\016\011\uffcd\016\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\001\002\000\006\035\212\040\210\001\002\000" +
    "\004\006\304\001\002\000\004\010\305\001\002\000\016" +
    "\014\055\015\054\016\245\025\246\026\011\035\253\001" +
    "\002\000\014\011\307\016\245\024\266\025\246\026\011" +
    "\001\002\000\016\011\uffce\016\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\001\002\000\006\035\212\040\210\001\002" +
    "\000\004\006\312\001\002\000\004\010\313\001\002\000" +
    "\016\014\055\015\054\016\245\025\246\026\011\035\253" +
    "\001\002\000\014\011\315\016\245\024\266\025\246\026" +
    "\011\001\002\000\020\011\uffd6\016\uffd6\017\316\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\001\002\000\004\010\317\001" +
    "\002\000\016\014\055\015\054\016\245\025\246\026\011" +
    "\035\253\001\002\000\014\011\321\016\245\024\266\025" +
    "\246\026\011\001\002\000\016\011\uffcf\016\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\001\002\000\004\007\323\001" +
    "\002\000\004\021\ufffc\001\002\000\004\002\uffee\001\002" +
    "\000\016\011\327\016\245\023\326\024\266\025\246\026" +
    "\011\001\002\000\004\035\330\001\002\000\004\002\uffed" +
    "\001\002\000\004\007\331\001\002\000\004\011\332\001" +
    "\002\000\004\002\uffec\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\020\002\004\003\015\004\013\010\005\021" +
    "\003\024\014\026\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\324\012\246\013\253\015\250\016" +
    "\247\017\242\021\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\021\027\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\032\001\001\000\004\027\033\001\001\000" +
    "\004\027\034\001\001\000\004\027\035\001\001\000\004" +
    "\027\036\001\001\000\004\027\037\001\001\000\004\027" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\112\001\001\000\006\010\134\024" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\125\001\001\000\004\006\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\143\024" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\152\024\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\161\024\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\170\024\014\001\001\000\004\021\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\235\001\001\000\002\001" +
    "\001\000\004\014\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\251\012\246\013\253\015\250\016" +
    "\247\017\242\021\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\266" +
    "\016\264\017\261\020\267\021\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\270\001\001\000\002\001\001\000\020\011\272\012\246" +
    "\013\253\015\250\016\247\017\242\021\243\001\001\000" +
    "\014\015\266\016\264\017\261\020\267\021\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\305\012\246\013\253\015\250\016\247" +
    "\017\242\021\243\001\001\000\014\015\266\016\264\017" +
    "\261\020\267\021\262\001\001\000\002\001\001\000\004" +
    "\022\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\313\012\246\013\253\015\250\016\247\017\242" +
    "\021\243\001\001\000\014\015\266\016\264\017\261\020" +
    "\267\021\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\317\012\246\013\253\015\250\016\247\017" +
    "\242\021\243\001\001\000\014\015\266\016\264\017\261" +
    "\020\267\021\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\266" +
    "\016\264\017\261\020\267\021\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= Identificador Atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_FOR ::= Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_ASIGNACION ::= Identificador Asignacion Identificador OperadorAritmetico Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= string Identificador Asignacion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= string Identificador Atribucion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= string Identificador Asignacion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= string Identificador Atribucion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= TipoDato Incremento Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= TipoDato Identificador Incremento FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= TipoDato Identificador Asignacion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= TipoDato Identificador Atribucion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= TipoDato Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODO ::= INICIO_METODO SENTENCIA Return Identificador FinalLinea LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO ::= INICIO_METODO SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= INICIO_METODO LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTS_A ::= string Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTS_A ::= string Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENTS_A ::= TipoDato Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGUMENTS_A ::= TipoDato Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGUMENTS_A ::= ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGUMENTS ::= ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGUMENTS ::= ARGUMENTS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO_METODO ::= ACCESO_METODO TipoDato Identificador ParentecisA ARGUMENTS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACCESO_METODO ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACCESO_METODO ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONSTRUCTOR ::= Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO_CLASE ::= Public Class Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORT ::= Package Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASS ::= IMPORT INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

