
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 12 22:39:53 COT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 12 22:39:53 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\052\000" +
    "\002\003\051\000\002\030\013\000\002\034\012\000\002" +
    "\041\020\000\002\041\021\000\002\044\025\000\002\004" +
    "\005\000\002\004\007\000\002\035\005\000\002\035\011" +
    "\000\002\005\006\000\002\005\010\000\002\006\006\000" +
    "\002\007\017\000\002\024\003\000\002\024\003\000\002" +
    "\010\010\000\002\010\011\000\002\010\011\000\002\025" +
    "\003\000\002\025\004\000\002\025\005\000\002\025\006" +
    "\000\002\027\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\007\000\002" +
    "\027\007\000\002\043\003\000\002\043\005\000\002\036" +
    "\020\000\002\036\023\000\002\036\037\000\002\037\021" +
    "\000\002\026\004\000\002\026\005\000\002\026\010\000" +
    "\002\011\003\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\005\000\002\011\004" +
    "\000\002\011\003\000\002\012\005\000\002\012\007\000" +
    "\002\012\007\000\002\012\006\000\002\012\006\000\002" +
    "\012\010\000\002\012\010\000\002\012\011\000\002\012" +
    "\011\000\002\012\006\000\002\013\006\000\002\013\007" +
    "\000\002\013\011\000\002\013\007\000\002\013\010\000" +
    "\002\042\012\000\002\040\005\000\002\040\007\000\002" +
    "\040\005\000\002\040\006\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\015\011" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\006\000\002\022\007\000\002" +
    "\016\015\000\002\017\011\000\002\020\013\000\002\021" +
    "\011\000\002\023\012\000\002\023\011\000\002\014\005" +
    "\000\002\014\004\000\002\014\004\000\002\031\004\000" +
    "\002\032\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\014\020\021\021\022\026\005\045\017\052" +
    "\013\001\002\000\004\021\u0125\001\002\000\004\005\u0182" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\ufffd\001\002" +
    "\000\004\021\u0125\001\002\000\004\035\u011d\001\002\000" +
    "\006\014\265\043\264\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\u011c\001\002\000\010\014\uffe9\015\uffe9\043" +
    "\uffe9\001\002\000\026\011\346\014\343\015\031\016\350" +
    "\021\032\025\352\026\005\035\076\045\017\060\077\001" +
    "\002\000\004\035\333\001\002\000\010\014\uffea\022\325" +
    "\043\uffea\001\002\000\004\002\ufffa\001\002\000\012\014" +
    "\033\015\031\021\032\045\017\001\002\000\004\002\uffff" +
    "\001\002\000\010\014\265\015\173\043\264\001\002\000" +
    "\012\014\033\015\031\021\032\045\017\001\002\000\012" +
    "\014\033\015\031\021\032\045\017\001\002\000\004\035" +
    "\051\001\002\000\010\014\uffea\015\uffea\043\uffea\001\002" +
    "\000\006\030\034\035\035\001\002\000\004\035\047\001" +
    "\002\000\012\007\040\030\036\032\037\037\041\001\002" +
    "\000\004\007\046\001\002\000\004\036\044\001\002\000" +
    "\036\011\uffc6\014\uffc6\015\uffc6\016\uffc6\021\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\035\uffc6\045\uffc6\047\uffc6\057" +
    "\uffc6\060\uffc6\001\002\000\004\036\042\001\002\000\004" +
    "\007\043\001\002\000\036\011\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\035\uffc5" +
    "\045\uffc5\047\uffc5\057\uffc5\060\uffc5\001\002\000\004\007" +
    "\045\001\002\000\036\011\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\035\uffc4\045" +
    "\uffc4\047\uffc4\057\uffc4\060\uffc4\001\002\000\036\011\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\021\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\035\uffc3\045\uffc3\047\uffc3\057\uffc3\060\uffc3" +
    "\001\002\000\004\007\050\001\002\000\036\011\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\035\uffc2\045\uffc2\047\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\006\032\052\037\053\001\002\000\004\012\062" +
    "\001\002\000\004\012\054\001\002\000\006\012\055\035" +
    "\056\001\002\000\004\007\061\001\002\000\004\012\057" +
    "\001\002\000\004\007\060\001\002\000\036\011\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\035\uffbf\045\uffbf\047\uffbf\057\uffbf\060\uffbf\001" +
    "\002\000\036\011\uffc1\014\uffc1\015\uffc1\016\uffc1\021\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\035\uffc1\045\uffc1\047" +
    "\uffc1\057\uffc1\060\uffc1\001\002\000\006\012\063\035\064" +
    "\001\002\000\004\007\067\001\002\000\004\012\065\001" +
    "\002\000\004\007\066\001\002\000\036\011\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\035\uffbe\045\uffbe\047\uffbe\057\uffbe\060\uffbe\001\002" +
    "\000\036\011\uffc0\014\uffc0\015\uffc0\016\uffc0\021\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\035\uffc0\045\uffc0\047\uffc0" +
    "\057\uffc0\060\uffc0\001\002\000\004\015\173\001\002\000" +
    "\004\047\072\001\002\000\004\010\172\001\002\000\012" +
    "\014\033\015\031\021\032\045\017\001\002\000\010\014" +
    "\100\035\076\060\077\001\002\000\004\011\157\001\002" +
    "\000\004\032\153\001\002\000\004\053\146\001\002\000" +
    "\004\035\101\001\002\000\004\032\102\001\002\000\006" +
    "\035\106\036\103\001\002\000\004\027\143\001\002\000" +
    "\004\007\142\001\002\000\004\007\141\001\002\000\006" +
    "\027\107\053\110\001\002\000\006\035\140\036\137\001" +
    "\002\000\006\035\113\057\112\001\002\000\004\007\136" +
    "\001\002\000\004\005\132\001\002\000\004\005\114\001" +
    "\002\000\006\006\116\035\117\001\002\000\004\006\130" +
    "\001\002\000\022\006\uffb6\007\uffb6\011\uffb6\014\uffb6\023" +
    "\uffb6\027\uffb6\035\uffb6\060\uffb6\001\002\000\010\006\uffda" +
    "\013\120\053\121\001\002\000\004\035\127\001\002\000" +
    "\006\035\123\057\112\001\002\000\004\006\126\001\002" +
    "\000\004\005\124\001\002\000\006\006\116\035\125\001" +
    "\002\000\006\006\uffda\013\120\001\002\000\004\007\uffb7" +
    "\001\002\000\004\006\uffd9\001\002\000\004\007\131\001" +
    "\002\000\022\006\uffb5\007\uffb5\011\uffb5\014\uffb5\023\uffb5" +
    "\027\uffb5\035\uffb5\060\uffb5\001\002\000\006\006\134\035" +
    "\125\001\002\000\004\006\135\001\002\000\022\006\uffb4" +
    "\007\uffb4\011\uffb4\014\uffb4\023\uffb4\027\uffb4\035\uffb4\060" +
    "\uffb4\001\002\000\022\006\uffb3\007\uffb3\011\uffb3\014\uffb3" +
    "\023\uffb3\027\uffb3\035\uffb3\060\uffb3\001\002\000\032\011" +
    "\uffba\014\uffba\015\uffba\016\uffba\021\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\035\uffba\045\uffba\057\uffba\001\002\000" +
    "\006\006\uffb0\007\uffb0\001\002\000\006\006\uffb2\007\uffb2" +
    "\001\002\000\032\011\uffbb\014\uffbb\015\uffbb\016\uffbb\021" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\035\uffbb\045\uffbb" +
    "\057\uffbb\001\002\000\032\011\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\035\uffb9" +
    "\045\uffb9\057\uffb9\001\002\000\006\035\145\036\144\001" +
    "\002\000\006\006\uffb1\007\uffb1\001\002\000\006\006\uffaf" +
    "\007\uffaf\001\002\000\004\035\147\001\002\000\004\032" +
    "\150\001\002\000\004\035\151\001\002\000\004\007\152" +
    "\001\002\000\032\011\uffb8\014\uffb8\015\uffb8\016\uffb8\021" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\035\uffb8\045\uffb8" +
    "\057\uffb8\001\002\000\006\035\155\036\103\001\002\000" +
    "\004\007\156\001\002\000\004\027\107\001\002\000\032" +
    "\011\uffbc\014\uffbc\015\uffbc\016\uffbc\021\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\035\uffbc\045\uffbc\057\uffbc\001\002" +
    "\000\004\050\163\001\002\000\004\011\161\001\002\000" +
    "\004\011\162\001\002\000\004\002\ufff7\001\002\000\004" +
    "\005\164\001\002\000\004\051\165\001\002\000\004\035" +
    "\166\001\002\000\004\006\167\001\002\000\004\010\170" +
    "\001\002\000\004\011\171\001\002\000\004\011\uff9d\001" +
    "\002\000\024\014\uff9e\015\uff9e\016\uff9e\021\uff9e\025\uff9e" +
    "\026\uff9e\035\uff9e\045\uff9e\060\uff9e\001\002\000\004\035" +
    "\174\001\002\000\004\007\175\001\002\000\036\011\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\021\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\035\uffbd\045\uffbd\047\uffbd\057\uffbd\060\uffbd" +
    "\001\002\000\004\021\200\001\002\000\006\021\032\045" +
    "\017\001\002\000\004\035\201\001\002\000\004\005\202" +
    "\001\002\000\004\014\203\001\002\000\004\035\204\001" +
    "\002\000\004\013\205\001\002\000\004\014\206\001\002" +
    "\000\004\035\207\001\002\000\004\006\210\001\002\000" +
    "\004\010\211\001\002\000\004\035\213\001\002\000\004" +
    "\035\213\001\002\000\004\032\214\001\002\000\004\035" +
    "\215\001\002\000\004\007\216\001\002\000\006\011\uffec" +
    "\035\uffec\001\002\000\004\011\220\001\002\000\006\021" +
    "\uffeb\045\uffeb\001\002\000\004\023\222\001\002\000\004" +
    "\035\223\001\002\000\004\027\224\001\002\000\004\035" +
    "\225\001\002\000\004\007\226\001\002\000\004\011\227" +
    "\001\002\000\006\021\032\045\017\001\002\000\004\023" +
    "\231\001\002\000\004\035\232\001\002\000\004\027\233" +
    "\001\002\000\004\035\234\001\002\000\004\007\235\001" +
    "\002\000\004\011\236\001\002\000\006\021\032\045\017" +
    "\001\002\000\004\023\240\001\002\000\004\035\241\001" +
    "\002\000\004\027\242\001\002\000\004\035\243\001\002" +
    "\000\004\007\244\001\002\000\004\011\245\001\002\000" +
    "\006\021\032\045\017\001\002\000\004\023\247\001\002" +
    "\000\004\035\250\001\002\000\004\027\251\001\002\000" +
    "\004\035\252\001\002\000\004\007\253\001\002\000\004" +
    "\011\254\001\002\000\006\021\032\045\017\001\002\000" +
    "\004\026\005\001\002\000\004\023\257\001\002\000\004" +
    "\035\260\001\002\000\004\007\261\001\002\000\004\011" +
    "\262\001\002\000\004\011\263\001\002\000\004\002\ufff8" +
    "\001\002\000\004\044\314\001\002\000\004\035\266\001" +
    "\002\000\004\005\267\001\002\000\010\006\271\014\273" +
    "\015\270\001\002\000\006\035\304\041\305\001\002\000" +
    "\012\006\uffe1\010\uffe1\014\uffe1\015\uffe1\001\002\000\012" +
    "\006\271\010\uffe5\014\273\015\270\001\002\000\004\035" +
    "\276\001\002\000\004\010\275\001\002\000\032\011\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\021\uffe8\023\uffe8\025\uffe8\026" +
    "\uffe8\035\uffe8\045\uffe8\057\uffe8\060\uffe8\001\002\000\006" +
    "\006\300\013\277\001\002\000\012\006\uffdf\010\uffdf\014" +
    "\uffdf\015\uffdf\001\002\000\012\006\uffe0\010\uffe0\014\uffe0" +
    "\015\uffe0\001\002\000\012\006\271\010\uffe4\014\273\015" +
    "\270\001\002\000\012\006\271\010\uffe3\014\273\015\270" +
    "\001\002\000\004\010\uffe2\001\002\000\006\006\313\013" +
    "\312\001\002\000\004\042\306\001\002\000\004\035\307" +
    "\001\002\000\006\006\311\013\310\001\002\000\012\006" +
    "\uffdb\010\uffdb\014\uffdb\015\uffdb\001\002\000\012\006\uffdc" +
    "\010\uffdc\014\uffdc\015\uffdc\001\002\000\012\006\uffdd\010" +
    "\uffdd\014\uffdd\015\uffdd\001\002\000\012\006\uffde\010\uffde" +
    "\014\uffde\015\uffde\001\002\000\006\035\315\046\316\001" +
    "\002\000\004\005\322\001\002\000\004\005\317\001\002" +
    "\000\010\006\271\014\273\015\270\001\002\000\004\010" +
    "\321\001\002\000\032\011\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\021\uffe7\023\uffe7\025\uffe7\026\uffe7\035\uffe7\045\uffe7\057" +
    "\uffe7\060\uffe7\001\002\000\010\006\271\014\273\015\270" +
    "\001\002\000\004\010\324\001\002\000\032\011\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\021\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\035\uffe6\045\uffe6\057\uffe6\060\uffe6\001\002\000\004\035" +
    "\326\001\002\000\006\010\327\056\330\001\002\000\012" +
    "\014\uffee\015\uffee\021\uffee\045\uffee\001\002\000\004\035" +
    "\331\001\002\000\004\010\332\001\002\000\012\014\uffed" +
    "\015\uffed\021\uffed\045\uffed\001\002\000\006\007\334\053" +
    "\335\001\002\000\004\021\ufff2\001\002\000\004\035\336" +
    "\001\002\000\004\007\337\001\002\000\004\021\ufff1\001" +
    "\002\000\032\011\uffca\014\uffca\015\uffca\016\uffca\021\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\035\uffca\045\uffca\057" +
    "\uffca\001\002\000\016\011\u0118\016\350\023\u0117\024\375" +
    "\025\352\026\005\001\002\000\032\011\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\035\uffd0\045\uffd0\057\uffd0\001\002\000\006\030\034\035" +
    "\u0114\001\002\000\032\011\uffce\014\uffce\015\uffce\016\uffce" +
    "\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\035\uffce\045" +
    "\uffce\057\uffce\001\002\000\032\011\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\035" +
    "\uffcc\045\uffcc\057\uffcc\001\002\000\004\002\uffd4\001\002" +
    "\000\032\011\uffd1\014\uffd1\015\uffd1\016\uffd1\021\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\035\uffd1\045\uffd1\057\uffd1" +
    "\001\002\000\004\005\u010a\001\002\000\032\011\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\035\uffc7\045\uffc7\057\uffc7\001\002\000\004\005" +
    "\353\001\002\000\006\035\356\040\355\001\002\000\004" +
    "\006\367\001\002\000\006\006\uffad\007\uffad\001\002\000" +
    "\004\033\357\001\002\000\012\012\361\035\363\036\360" +
    "\040\362\001\002\000\006\006\uffab\007\uffab\001\002\000" +
    "\006\012\364\035\365\001\002\000\006\006\uffac\007\uffac" +
    "\001\002\000\006\006\uffaa\007\uffaa\001\002\000\006\006" +
    "\uffa9\007\uffa9\001\002\000\004\012\366\001\002\000\006" +
    "\006\uffa8\007\uffa8\001\002\000\004\010\370\001\002\000" +
    "\024\014\343\015\031\016\350\021\032\025\352\026\005" +
    "\035\076\045\017\060\077\001\002\000\014\011\374\016" +
    "\350\024\375\025\352\026\005\001\002\000\032\011\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\035\uffcb\045\uffcb\057\uffcb\001\002\000\032" +
    "\011\uffc8\014\uffc8\015\uffc8\016\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\035\uffc8\045\uffc8\057\uffc8\001\002" +
    "\000\032\011\uffa6\014\uffa6\015\uffa6\016\uffa6\021\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\035\uffa6\045\uffa6\057\uffa6" +
    "\001\002\000\004\010\u0102\001\002\000\032\011\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\035\uffcd\045\uffcd\057\uffcd\001\002\000\032\011" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\021\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\035\uffcf\045\uffcf\057\uffcf\001\002\000" +
    "\004\024\375\001\002\000\032\011\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\035" +
    "\uffc9\045\uffc9\057\uffc9\001\002\000\024\014\343\015\031" +
    "\016\350\021\032\025\352\026\005\035\076\045\017\060" +
    "\077\001\002\000\014\011\u0104\016\350\024\375\025\352" +
    "\026\005\001\002\000\004\025\u0105\001\002\000\004\005" +
    "\u0106\001\002\000\006\035\356\040\355\001\002\000\004" +
    "\006\u0108\001\002\000\004\007\u0109\001\002\000\032\011" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\021\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\035\uffa5\045\uffa5\057\uffa5\001\002\000" +
    "\006\035\356\040\355\001\002\000\004\006\u010c\001\002" +
    "\000\004\010\u010d\001\002\000\024\014\343\015\031\016" +
    "\350\021\032\025\352\026\005\035\076\045\017\060\077" +
    "\001\002\000\014\011\u010f\016\350\024\375\025\352\026" +
    "\005\001\002\000\034\011\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\u0110\021\uffae\023\uffae\024\uffae\025\uffae\026\uffae\035" +
    "\uffae\045\uffae\057\uffae\001\002\000\004\010\u0111\001\002" +
    "\000\024\014\343\015\031\016\350\021\032\025\352\026" +
    "\005\035\076\045\017\060\077\001\002\000\014\011\u0113" +
    "\016\350\024\375\025\352\026\005\001\002\000\032\011" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\021\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\035\uffa7\045\uffa7\057\uffa7\001\002\000" +
    "\012\007\040\030\036\032\u0115\037\041\001\002\000\006" +
    "\035\106\036\u0116\001\002\000\006\007\045\027\143\001" +
    "\002\000\004\035\u0119\001\002\000\004\002\uffd3\001\002" +
    "\000\004\007\u011a\001\002\000\004\011\u011b\001\002\000" +
    "\004\002\uffd2\001\002\000\004\002\001\001\002\000\006" +
    "\007\u011e\053\u011f\001\002\000\004\021\ufff0\001\002\000" +
    "\004\035\u0120\001\002\000\004\053\u0121\001\002\000\004" +
    "\027\u0122\001\002\000\004\007\u0123\001\002\000\004\021" +
    "\uffef\001\002\000\012\014\033\015\031\021\032\045\017" +
    "\001\002\000\004\022\325\001\002\000\012\014\033\015" +
    "\031\021\032\045\017\001\002\000\004\021\200\001\002" +
    "\000\006\035\123\057\112\001\002\000\010\014\100\035" +
    "\076\060\077\001\002\000\004\011\u012b\001\002\000\006" +
    "\021\032\045\017\001\002\000\010\014\100\035\076\060" +
    "\077\001\002\000\004\011\u012e\001\002\000\006\035\123" +
    "\057\112\001\002\000\004\023\u0130\001\002\000\004\035" +
    "\u0131\001\002\000\004\007\u0132\001\002\000\004\011\u0133" +
    "\001\002\000\006\035\123\057\112\001\002\000\004\035" +
    "\u0136\001\002\000\004\011\u015c\001\002\000\004\053\u0137" +
    "\001\002\000\004\035\u0138\001\002\000\004\053\u0139\001" +
    "\002\000\004\035\u013a\001\002\000\004\005\u013b\001\002" +
    "\000\004\012\u013c\001\002\000\004\035\u013d\001\002\000" +
    "\004\035\u013e\001\002\000\004\035\u013f\001\002\000\006" +
    "\012\u0140\035\u0141\001\002\000\004\027\u0145\001\002\000" +
    "\004\012\u0142\001\002\000\004\006\u0143\001\002\000\004" +
    "\007\u0144\001\002\000\006\011\uffd8\035\uffd8\001\002\000" +
    "\010\005\u0147\035\123\057\112\001\002\000\004\027\u014c" +
    "\001\002\000\006\035\155\036\103\001\002\000\004\006" +
    "\u0149\001\002\000\004\006\u014a\001\002\000\004\007\u014b" +
    "\001\002\000\006\011\uffd7\035\uffd7\001\002\000\004\012" +
    "\u014d\001\002\000\004\012\u014e\001\002\000\004\027\u014f" +
    "\001\002\000\006\035\123\057\112\001\002\000\004\027" +
    "\u0151\001\002\000\004\012\u0152\001\002\000\004\035\u0153" +
    "\001\002\000\004\035\u0154\001\002\000\004\035\u0155\001" +
    "\002\000\004\035\u0156\001\002\000\004\012\u0157\001\002" +
    "\000\004\027\u0158\001\002\000\006\035\123\057\112\001" +
    "\002\000\004\006\u015a\001\002\000\004\007\u015b\001\002" +
    "\000\006\011\uffd6\035\uffd6\001\002\000\004\011\u015d\001" +
    "\002\000\004\002\ufff3\001\002\000\006\021\032\045\017" +
    "\001\002\000\004\023\u0160\001\002\000\004\035\u0161\001" +
    "\002\000\004\027\u0162\001\002\000\004\035\u0163\001\002" +
    "\000\004\007\u0164\001\002\000\004\011\u0165\001\002\000" +
    "\006\021\032\045\017\001\002\000\004\023\u0167\001\002" +
    "\000\004\035\u0168\001\002\000\004\027\u0169\001\002\000" +
    "\004\035\u016a\001\002\000\004\007\u016b\001\002\000\004" +
    "\011\u016c\001\002\000\006\021\032\045\017\001\002\000" +
    "\004\023\u016e\001\002\000\004\035\u016f\001\002\000\004" +
    "\027\u0170\001\002\000\004\035\u0171\001\002\000\004\007" +
    "\u0172\001\002\000\004\011\u0173\001\002\000\006\021\032" +
    "\045\017\001\002\000\004\023\u0175\001\002\000\004\035" +
    "\u0176\001\002\000\004\027\u0177\001\002\000\004\035\u0178" +
    "\001\002\000\004\007\u0179\001\002\000\004\011\u017a\001" +
    "\002\000\006\021\032\045\017\001\002\000\004\026\005" +
    "\001\002\000\004\023\u017d\001\002\000\004\035\u017e\001" +
    "\002\000\004\007\u017f\001\002\000\004\011\u0180\001\002" +
    "\000\004\011\u0181\001\002\000\004\002\ufff9\001\002\000" +
    "\006\014\u0185\035\u0184\001\002\000\004\006\u0199\001\002" +
    "\000\004\032\u0193\001\002\000\004\035\u0186\001\002\000" +
    "\004\032\u0187\001\002\000\004\036\u0188\001\002\000\004" +
    "\007\u0189\001\002\000\006\035\356\040\355\001\002\000" +
    "\004\007\u018b\001\002\000\006\030\u018c\035\u018e\001\002" +
    "\000\004\035\u0192\001\002\000\004\006\uffa3\001\002\000" +
    "\006\030\u018f\037\u0190\001\002\000\004\006\uffa0\001\002" +
    "\000\004\036\u0191\001\002\000\004\006\uffa1\001\002\000" +
    "\004\006\uff9f\001\002\000\004\036\u0194\001\002\000\004" +
    "\007\u0195\001\002\000\006\035\356\040\355\001\002\000" +
    "\004\007\u0197\001\002\000\006\030\u018c\035\u018e\001\002" +
    "\000\004\006\uffa2\001\002\000\004\010\u019a\001\002\000" +
    "\024\014\343\015\031\016\350\021\032\025\352\026\005" +
    "\035\076\045\017\060\077\001\002\000\014\011\u019c\016" +
    "\350\024\375\025\352\026\005\001\002\000\034\002\uffa4" +
    "\011\uffa4\014\uffa4\015\uffa4\016\uffa4\021\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\035\uffa4\045\uffa4\057\uffa4\001\002" +
    "\000\006\021\032\045\017\001\002\000\004\035\u0136\001" +
    "\002\000\004\035\u01a1\001\002\000\026\014\343\015\031" +
    "\016\350\021\032\025\352\026\005\035\076\045\017\047" +
    "\072\060\077\001\002\000\004\035\u01a2\001\002\000\004" +
    "\032\u01a3\001\002\000\004\054\u01a4\001\002\000\004\035" +
    "\u01a5\001\002\000\004\005\u01a6\001\002\000\004\054\u01a7" +
    "\001\002\000\004\035\u01a8\001\002\000\004\005\u01a9\001" +
    "\002\000\004\035\u01aa\001\002\000\004\053\u01ab\001\002" +
    "\000\004\035\u01ac\001\002\000\004\006\u01ad\001\002\000" +
    "\004\006\u01ae\001\002\000\004\007\u01af\001\002\000\026" +
    "\014\uffd5\015\uffd5\016\uffd5\021\uffd5\025\uffd5\026\uffd5\035" +
    "\uffd5\045\uffd5\047\uffd5\060\uffd5\001\002\000\014\011\u01c2" +
    "\016\350\024\375\025\352\026\005\001\002\000\024\014" +
    "\343\015\031\016\350\021\032\025\352\026\005\035\076" +
    "\045\017\060\077\001\002\000\026\014\033\015\031\016" +
    "\350\021\032\024\375\025\352\026\005\035\123\045\017" +
    "\057\112\001\002\000\004\011\157\001\002\000\006\035" +
    "\123\057\112\001\002\000\004\011\157\001\002\000\004" +
    "\011\u01b7\001\002\000\006\021\032\045\017\001\002\000" +
    "\004\035\u0136\001\002\000\004\011\u01ba\001\002\000\004" +
    "\011\u01bb\001\002\000\004\002\ufff4\001\002\000\004\011" +
    "\u01bd\001\002\000\006\021\032\045\017\001\002\000\004" +
    "\035\u0136\001\002\000\004\011\u01c0\001\002\000\004\011" +
    "\u01c1\001\002\000\004\002\ufff5\001\002\000\004\011\u01c3" +
    "\001\002\000\004\002\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\034\002\015\003\005\004\011\005\023\010" +
    "\017\021\024\024\013\026\014\030\010\034\007\035\003" +
    "\041\006\044\022\001\001\000\004\005\u019c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\340\012\341\013" +
    "\346\015\343\016\344\017\337\021\350\024\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\027\012\026\024\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\175\024\067\001\001\000" +
    "\006\012\070\024\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\072\001\001\000\002" +
    "\001\001\000\006\012\073\024\067\001\001\000\004\013" +
    "\074\001\001\000\004\032\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\104\042\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\176\001" +
    "\001\000\006\010\220\024\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\211\001\001\000" +
    "\004\006\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\227\024\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\236\024\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\245\024\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\254\024\013\001" +
    "\001\000\004\021\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\273\027\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\301\001\001\000\004\027\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\317\027\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\322" +
    "\027\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\376\016" +
    "\375\017\371\020\377\021\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\370\012" +
    "\341\013\346\015\343\016\344\017\337\021\350\024\067" +
    "\001\001\000\014\015\376\016\375\017\371\020\377\021" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0100\001\001\000\002\001\001\000\022" +
    "\011\u0102\012\341\013\346\015\343\016\344\017\337\021" +
    "\350\024\067\001\001\000\014\015\376\016\375\017\371" +
    "\020\377\021\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u010a\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\u010d\012\341" +
    "\013\346\015\343\016\344\017\337\021\350\024\067\001" +
    "\001\000\014\015\376\016\375\017\371\020\377\021\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\u0111\012\341\013\346\015\343\016\344\017\337\021\350" +
    "\024\067\001\001\000\014\015\376\016\375\017\371\020" +
    "\377\021\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\104\042\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u0125\024\067\001\001\000\002\001\001\000\010" +
    "\010\u0127\012\u0126\024\025\001\001\000\004\007\u015d\001" +
    "\001\000\004\040\u0128\001\001\000\004\013\u0129\001\001" +
    "\000\002\001\001\000\006\010\u012b\024\013\001\001\000" +
    "\004\013\u012c\001\001\000\002\001\001\000\004\040\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0133\001\001\000\004" +
    "\036\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0145\001\001\000\002\001\001" +
    "\000\004\033\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u014f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0158\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u015e\024\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0165\024\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\u016c\024\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u0173\024\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u017a\024\013\001\001" +
    "\000\004\021\u017b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0189\001" +
    "\001\000\002\001\001\000\004\014\u018c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0195\001" +
    "\001\000\002\001\001\000\004\014\u0197\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\u019a\012\341\013" +
    "\346\015\343\016\344\017\337\021\350\024\067\001\001" +
    "\000\014\015\376\016\375\017\371\020\377\021\372\001" +
    "\001\000\002\001\001\000\006\010\u019d\024\013\001\001" +
    "\000\004\036\u019e\001\001\000\004\037\u019f\001\001\000" +
    "\024\011\u01af\012\341\013\346\015\343\016\344\017\337" +
    "\021\350\024\067\031\u01b0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\376\016\375\017\371\020\377" +
    "\021\372\001\001\000\022\011\u01b1\012\341\013\346\015" +
    "\343\016\344\017\337\021\350\024\067\001\001\000\022" +
    "\012\u01b3\015\376\016\375\017\371\020\377\021\372\024" +
    "\067\040\u01b2\001\001\000\004\032\u01bb\001\001\000\004" +
    "\040\u01b4\001\001\000\004\032\u01b5\001\001\000\002\001" +
    "\001\000\006\010\u01b7\024\013\001\001\000\004\036\u01b8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u01bd\024\013\001\001" +
    "\000\004\036\u01be\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FINAL_BLOQUE_TRY_CATCH ::= LlaveC Catch ParentecisA exception Identificador ParentecisC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINAL_BLOQUE_TRY_CATCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INICIO_BLOQUE_TRY_CATCH ::= Try LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_BLOQUE_TRY_CATCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_FOR ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION_FOR ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION_FOR ::= Identificador Atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_FOR ::= Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_FOR ::= TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMADO_METODO ::= Super ParentecisA ARGUMENTS ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LLAMADO_METODO ::= Super ParentecisA ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LLAMADO_METODO ::= Identificador ParentecisA ARGUMENTS ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LLAMADO_METODO ::= Identificador ParentecisA ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARSE_DATA ::= Identificador Punto Identificador ParentecisA Identificador Punto LLAMADO_METODO ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARSE_DATA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_ASIGNACION ::= This Punto Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion PARSE_DATA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion Identificador Punto LLAMADO_METODO FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_ASIGNACION ::= Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= ACCESO_METODO string Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= string Identificador Asignacion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= string Identificador Atribucion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= string Identificador Asignacion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= string Identificador Atribucion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= TipoDato Incremento Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= TipoDato Identificador Incremento FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= TipoDato Identificador Asignacion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= TipoDato Identificador Atribucion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= TipoDato Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO ::= INICIO_METODO SENTENCIA Return Identificador FinalLinea LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO ::= INICIO_METODO SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO ::= INICIO_METODO LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTANCIACION_CLASE ::= Identificador Identificador Asignacion New Identificador ParentecisA New Identificador ParentecisA Identificador Punto Identificador ParentecisC ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CLASE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRINT ::= Identificador Punto Identificador Punto Identificador ParentecisA Comillas Identificador Identificador Identificador Comillas OperadorAritmetico LLAMADO_METODO OperadorAritmetico Comillas Comillas OperadorAritmetico LLAMADO_METODO OperadorAritmetico Comillas Identificador Identificador Identificador Identificador Comillas OperadorAritmetico LLAMADO_METODO ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-28)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRINT ::= Identificador Punto Identificador Punto Identificador ParentecisA Comillas Identificador Identificador Identificador Comillas OperadorAritmetico ParentecisA OPERACION_ARITMETICA ParentecisC ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRINT ::= Identificador Punto Identificador Punto Identificador ParentecisA Comillas Identificador Identificador Identificador Identificador Comillas ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGUMENTS ::= Identificador Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGUMENTS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETERS_A ::= string CorcheteA CorcheteC Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETERS_A ::= string CorcheteA CorcheteC Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETERS_A ::= string Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETERS_A ::= string Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETERS_A ::= TipoDato Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETERS_A ::= TipoDato Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETERS_A ::= ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETERS ::= PARAMETERS_A PARAMETERS_A PARAMETERS_A PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETERS ::= PARAMETERS_A PARAMETERS_A PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETERS ::= PARAMETERS_A PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETERS ::= PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO_METODO ::= ACCESO_METODO Static Void Identificador ParentecisA PARAMETERS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO_METODO ::= ACCESO_METODO Static Void Main ParentecisA PARAMETERS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INICIO_METODO ::= ACCESO_METODO TipoDato Identificador ParentecisA PARAMETERS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ACCESO_METODO ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ACCESO_METODO ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTRUCTOR ::= Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO_CLASE ::= Public Class Identificador Extends Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO_CLASE ::= Public Class Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORT ::= Import Identificador Punto Identificador Punto OperadorAritmetico FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORT ::= Import Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PACKAGE_PATH ::= Package Identificador Punto Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PACKAGE_PATH",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PACKAGE_PATH ::= Package Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PACKAGE_PATH",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CLASE_PROFESOR ::= PACKAGE_PATH INICIO_CLASE DECLARACION INICIO_METODO LLAMADO_METODO DECLARACION_ASIGNACION LlaveC INICIO_METODO DECLARACION_ASIGNACION LlaveC LLAMADO_METODO Return Identificador FinalLinea LlaveC LLAMADO_METODO PRINT LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE_PROFESOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EJEMPLO_3 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE INICIO_BLOQUE_TRY_CATCH SENTENCIA DECLARACION LLAMADO_METODO FINAL_BLOQUE_TRY_CATCH LlaveC INICIO_METODO PRINT LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_3",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EJEMPLO_3 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE INICIO_BLOQUE_TRY_CATCH SENTENCIA LLAMADO_METODO FINAL_BLOQUE_TRY_CATCH LlaveC INICIO_METODO PRINT LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_3",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EJEMPLO_2 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE SENTENCIA LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EJEMPLO_1 ::= INICIO_CLASE INICIO_METODO DECLARACION INICIO_BLOQUE_TRY_CATCH DECLARACION DECLARACION_ASIGNACION FINAL_BLOQUE_TRY_CATCH LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS ::= INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASS ::= PACKAGE_PATH INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROG ::= CLASE_PROFESOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROG ::= EJEMPLO_3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROG ::= EJEMPLO_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROG ::= EJEMPLO_1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

