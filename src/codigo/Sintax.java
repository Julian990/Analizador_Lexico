
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 09 21:03:16 COT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 09 21:03:16 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\003\052\000\002\003\051\000\002\030\013\000" +
    "\002\034\012\000\002\004\005\000\002\035\005\000\002" +
    "\035\011\000\002\005\006\000\002\006\006\000\002\007" +
    "\017\000\002\024\003\000\002\024\003\000\002\010\010" +
    "\000\002\010\011\000\002\025\003\000\002\025\013\000" +
    "\002\027\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\007\000\002\027" +
    "\007\000\002\036\020\000\002\037\021\000\002\026\004" +
    "\000\002\026\005\000\002\026\010\000\002\011\003\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\012\005\000\002\012\007\000\002\012\007\000" +
    "\002\012\006\000\002\012\006\000\002\012\010\000\002" +
    "\012\010\000\002\012\011\000\002\012\011\000\002\013" +
    "\006\000\002\013\007\000\002\013\011\000\002\040\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\015\011\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\006\000\002\022\007\000\002\016\015\000\002\017\011" +
    "\000\002\020\013\000\002\021\011\000\002\023\012\000" +
    "\002\023\011\000\002\014\005\000\002\014\004\000\002" +
    "\014\004\000\002\031\004\000\002\032\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\014\020\011\021\012\026\013\045\016\052" +
    "\005\001\002\000\004\002\uffff\001\002\000\004\035\u015f" +
    "\001\002\000\004\002\u015e\001\002\000\004\021\067\001" +
    "\002\000\020\011\u0130\014\147\015\142\016\136\025\137" +
    "\026\013\035\145\001\002\000\004\035\u012e\001\002\000" +
    "\010\014\ufff1\022\070\043\ufff1\001\002\000\004\005\u0113" +
    "\001\002\000\004\002\ufffc\001\002\000\012\014\305\015" +
    "\142\021\074\045\016\001\002\000\006\014\ufff0\043\ufff0" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\ufffe\001" +
    "\002\000\004\021\067\001\002\000\006\014\025\043\024" +
    "\001\002\000\004\002\000\001\002\000\004\044\061\001" +
    "\002\000\004\035\026\001\002\000\004\005\027\001\002" +
    "\000\010\006\032\014\033\015\031\001\002\000\004\010" +
    "\060\001\002\000\006\035\050\041\051\001\002\000\012" +
    "\006\uffeb\010\uffeb\014\uffeb\015\uffeb\001\002\000\004\035" +
    "\045\001\002\000\012\006\032\010\uffed\014\033\015\031" +
    "\001\002\000\010\006\032\014\033\015\031\001\002\000" +
    "\010\006\032\014\033\015\031\001\002\000\010\006\032" +
    "\014\033\015\031\001\002\000\010\006\032\014\033\015" +
    "\031\001\002\000\010\006\032\014\033\015\031\001\002" +
    "\000\010\006\032\014\033\015\031\001\002\000\010\006" +
    "\032\014\033\015\031\001\002\000\004\010\uffec\001\002" +
    "\000\006\006\047\013\046\001\002\000\012\006\uffe9\010" +
    "\uffe9\014\uffe9\015\uffe9\001\002\000\012\006\uffea\010\uffea" +
    "\014\uffea\015\uffea\001\002\000\006\006\057\013\056\001" +
    "\002\000\004\042\052\001\002\000\004\035\053\001\002" +
    "\000\006\006\055\013\054\001\002\000\012\006\uffe5\010" +
    "\uffe5\014\uffe5\015\uffe5\001\002\000\012\006\uffe6\010\uffe6" +
    "\014\uffe6\015\uffe6\001\002\000\012\006\uffe7\010\uffe7\014" +
    "\uffe7\015\uffe7\001\002\000\012\006\uffe8\010\uffe8\014\uffe8" +
    "\015\uffe8\001\002\000\022\011\uffef\014\uffef\015\uffef\016" +
    "\uffef\023\uffef\025\uffef\026\uffef\035\uffef\001\002\000\004" +
    "\046\062\001\002\000\004\005\063\001\002\000\010\006" +
    "\032\014\033\015\031\001\002\000\004\010\065\001\002" +
    "\000\022\011\uffee\014\uffee\015\uffee\016\uffee\023\uffee\025" +
    "\uffee\026\uffee\035\uffee\001\002\000\006\021\074\045\016" +
    "\001\002\000\004\022\070\001\002\000\004\035\071\001" +
    "\002\000\004\010\072\001\002\000\012\014\ufff4\015\ufff4" +
    "\021\ufff4\045\ufff4\001\002\000\004\035\076\001\002\000" +
    "\006\014\ufff1\043\ufff1\001\002\000\004\035\115\001\002" +
    "\000\004\053\077\001\002\000\004\035\100\001\002\000" +
    "\004\053\101\001\002\000\004\035\102\001\002\000\004" +
    "\005\103\001\002\000\004\012\104\001\002\000\004\035" +
    "\105\001\002\000\004\035\106\001\002\000\004\035\107" +
    "\001\002\000\004\035\110\001\002\000\004\012\111\001" +
    "\002\000\004\006\112\001\002\000\004\007\113\001\002" +
    "\000\004\035\uffe4\001\002\000\016\014\147\015\142\016" +
    "\136\025\137\026\013\035\145\001\002\000\004\035\116" +
    "\001\002\000\004\032\117\001\002\000\004\054\120\001" +
    "\002\000\004\035\121\001\002\000\004\005\122\001\002" +
    "\000\004\054\123\001\002\000\004\035\124\001\002\000" +
    "\004\005\125\001\002\000\004\035\126\001\002\000\004" +
    "\053\127\001\002\000\004\035\130\001\002\000\004\006" +
    "\131\001\002\000\004\006\132\001\002\000\004\007\133" +
    "\001\002\000\016\014\uffe3\015\uffe3\016\uffe3\025\uffe3\026" +
    "\uffe3\035\uffe3\001\002\000\016\011\uffd8\016\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\001\002\000\016\011\uffd5\016" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\001\002\000\004" +
    "\005\271\001\002\000\004\005\263\001\002\000\016\011" +
    "\uffde\016\uffde\023\uffde\024\uffde\025\uffde\026\uffde\001\002" +
    "\000\016\011\uffda\016\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\001\002\000\004\035\244\001\002\000\016\011\uffdc" +
    "\016\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\001\002\000" +
    "\014\011\213\016\136\024\215\025\137\026\013\001\002" +
    "\000\004\032\204\001\002\000\016\011\uffdf\016\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\001\002\000\006\030\150" +
    "\035\151\001\002\000\004\035\202\001\002\000\012\007" +
    "\154\030\152\032\153\037\155\001\002\000\004\007\201" +
    "\001\002\000\006\035\162\036\160\001\002\000\030\011" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\035\uffd4\047\uffd4\001\002\000\004\036" +
    "\156\001\002\000\004\007\157\001\002\000\030\011\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\021\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\035\uffd3\047\uffd3\001\002\000\006\007\175" +
    "\027\176\001\002\000\004\007\174\001\002\000\006\027" +
    "\163\053\164\001\002\000\006\035\173\036\172\001\002" +
    "\000\004\035\166\001\002\000\004\007\171\001\002\000" +
    "\004\005\167\001\002\000\004\006\170\001\002\000\004" +
    "\007\uffc8\001\002\000\016\011\uffc9\016\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\001\002\000\004\007\uffc5\001\002" +
    "\000\004\007\uffc7\001\002\000\016\011\uffca\016\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\001\002\000\030\011\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\035\uffd2\047\uffd2\001\002\000\006\035\200" +
    "\036\177\001\002\000\004\007\uffc6\001\002\000\004\007" +
    "\uffc4\001\002\000\030\011\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\035\uffd1\047" +
    "\uffd1\001\002\000\004\007\203\001\002\000\030\011\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\021\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\035\uffd0\047\uffd0\001\002\000\006\035\207" +
    "\036\205\001\002\000\004\027\176\001\002\000\004\007" +
    "\210\001\002\000\004\027\163\001\002\000\016\011\uffcb" +
    "\016\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\001\002\000" +
    "\016\011\uffd9\016\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\001\002\000\016\011\uffd6\016\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\001\002\000\004\011\243\001\002\000\016" +
    "\011\uffdb\016\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\001" +
    "\002\000\004\010\221\001\002\000\016\011\uffdd\016\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\001\002\000\004\024" +
    "\215\001\002\000\016\011\uffd7\016\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\001\002\000\016\014\147\015\142\016" +
    "\136\025\137\026\013\035\145\001\002\000\014\011\223" +
    "\016\136\024\215\025\137\026\013\001\002\000\004\025" +
    "\224\001\002\000\004\005\225\001\002\000\006\035\230" +
    "\040\227\001\002\000\004\006\241\001\002\000\006\006" +
    "\uffc2\007\uffc2\001\002\000\004\033\231\001\002\000\012" +
    "\012\233\035\235\036\232\040\234\001\002\000\006\006" +
    "\uffc0\007\uffc0\001\002\000\006\012\236\035\237\001\002" +
    "\000\006\006\uffc1\007\uffc1\001\002\000\006\006\uffbf\007" +
    "\uffbf\001\002\000\006\006\uffbe\007\uffbe\001\002\000\004" +
    "\012\240\001\002\000\006\006\uffbd\007\uffbd\001\002\000" +
    "\004\007\242\001\002\000\016\011\uffba\016\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\001\002\000\004\002\ufff8\001" +
    "\002\000\006\032\245\037\246\001\002\000\004\012\255" +
    "\001\002\000\004\012\247\001\002\000\006\012\250\035" +
    "\251\001\002\000\004\007\254\001\002\000\004\012\252" +
    "\001\002\000\004\007\253\001\002\000\030\011\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\035\uffcd\047\uffcd\001\002\000\030\011\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\035\uffcf\047\uffcf\001\002\000\006\012\256\035" +
    "\257\001\002\000\004\007\262\001\002\000\004\012\260" +
    "\001\002\000\004\007\261\001\002\000\030\011\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\035\uffcc\047\uffcc\001\002\000\030\011\uffce\014" +
    "\uffce\015\uffce\016\uffce\021\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\035\uffce\047\uffce\001\002\000\006\035\230\040" +
    "\227\001\002\000\004\006\265\001\002\000\004\010\266" +
    "\001\002\000\016\014\147\015\142\016\136\025\137\026" +
    "\013\035\145\001\002\000\014\011\270\016\136\024\215" +
    "\025\137\026\013\001\002\000\016\011\uffbb\016\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\001\002\000\006\035\230" +
    "\040\227\001\002\000\004\006\273\001\002\000\004\010" +
    "\274\001\002\000\016\014\147\015\142\016\136\025\137" +
    "\026\013\035\145\001\002\000\014\011\276\016\136\024" +
    "\215\025\137\026\013\001\002\000\020\011\uffc3\016\uffc3" +
    "\017\277\023\uffc3\024\uffc3\025\uffc3\026\uffc3\001\002\000" +
    "\004\010\300\001\002\000\016\014\147\015\142\016\136" +
    "\025\137\026\013\035\145\001\002\000\014\011\302\016" +
    "\136\024\215\025\137\026\013\001\002\000\016\011\uffbc" +
    "\016\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\001\002\000" +
    "\006\014\305\015\142\001\002\000\006\014\305\015\142" +
    "\001\002\000\006\030\150\035\306\001\002\000\012\007" +
    "\154\030\152\032\307\037\155\001\002\000\004\036\310" +
    "\001\002\000\004\007\175\001\002\000\004\047\312\001" +
    "\002\000\004\010\334\001\002\000\006\014\305\015\142" +
    "\001\002\000\006\014\316\035\145\001\002\000\004\011" +
    "\321\001\002\000\004\035\317\001\002\000\004\032\320" +
    "\001\002\000\006\035\162\036\205\001\002\000\004\050" +
    "\325\001\002\000\004\011\323\001\002\000\004\011\324" +
    "\001\002\000\004\002\ufff9\001\002\000\004\005\326\001" +
    "\002\000\004\051\327\001\002\000\004\035\330\001\002" +
    "\000\004\006\331\001\002\000\004\010\332\001\002\000" +
    "\004\011\333\001\002\000\004\011\uffb2\001\002\000\006" +
    "\014\uffb3\015\uffb3\001\002\000\004\021\337\001\002\000" +
    "\006\021\074\045\016\001\002\000\004\035\340\001\002" +
    "\000\004\005\341\001\002\000\004\014\342\001\002\000" +
    "\004\035\343\001\002\000\004\013\344\001\002\000\004" +
    "\014\345\001\002\000\004\035\346\001\002\000\004\006" +
    "\347\001\002\000\004\010\350\001\002\000\004\035\352" +
    "\001\002\000\004\035\352\001\002\000\004\032\353\001" +
    "\002\000\004\035\354\001\002\000\004\007\355\001\002" +
    "\000\006\011\ufff3\035\ufff3\001\002\000\004\011\357\001" +
    "\002\000\006\021\ufff2\045\ufff2\001\002\000\004\023\361" +
    "\001\002\000\004\035\362\001\002\000\004\027\363\001" +
    "\002\000\004\035\364\001\002\000\004\007\365\001\002" +
    "\000\004\011\366\001\002\000\006\021\074\045\016\001" +
    "\002\000\004\023\370\001\002\000\004\035\371\001\002" +
    "\000\004\027\372\001\002\000\004\035\373\001\002\000" +
    "\004\007\374\001\002\000\004\011\375\001\002\000\006" +
    "\021\074\045\016\001\002\000\004\023\377\001\002\000" +
    "\004\035\u0100\001\002\000\004\027\u0101\001\002\000\004" +
    "\035\u0102\001\002\000\004\007\u0103\001\002\000\004\011" +
    "\u0104\001\002\000\006\021\074\045\016\001\002\000\004" +
    "\023\u0106\001\002\000\004\035\u0107\001\002\000\004\027" +
    "\u0108\001\002\000\004\035\u0109\001\002\000\004\007\u010a" +
    "\001\002\000\004\011\u010b\001\002\000\006\021\074\045" +
    "\016\001\002\000\004\026\013\001\002\000\004\023\u010e" +
    "\001\002\000\004\035\u010f\001\002\000\004\007\u0110\001" +
    "\002\000\004\011\u0111\001\002\000\004\011\u0112\001\002" +
    "\000\004\002\ufffa\001\002\000\006\014\u0116\035\u0115\001" +
    "\002\000\004\006\u012a\001\002\000\004\032\u0124\001\002" +
    "\000\004\035\u0117\001\002\000\004\032\u0118\001\002\000" +
    "\004\036\u0119\001\002\000\004\007\u011a\001\002\000\006" +
    "\035\230\040\227\001\002\000\004\007\u011c\001\002\000" +
    "\006\030\u011d\035\u011f\001\002\000\004\035\u0123\001\002" +
    "\000\004\006\uffb8\001\002\000\006\030\u0120\037\u0121\001" +
    "\002\000\004\006\uffb5\001\002\000\004\036\u0122\001\002" +
    "\000\004\006\uffb6\001\002\000\004\006\uffb4\001\002\000" +
    "\004\036\u0125\001\002\000\004\007\u0126\001\002\000\006" +
    "\035\230\040\227\001\002\000\004\007\u0128\001\002\000" +
    "\006\030\u011d\035\u011f\001\002\000\004\006\uffb7\001\002" +
    "\000\004\010\u012b\001\002\000\016\014\147\015\142\016" +
    "\136\025\137\026\013\035\145\001\002\000\014\011\u012d" +
    "\016\136\024\215\025\137\026\013\001\002\000\020\002" +
    "\uffb9\011\uffb9\016\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\001\002\000\004\007\u012f\001\002\000\004\021\ufff7\001" +
    "\002\000\004\002\uffe2\001\002\000\016\011\u0133\016\136" +
    "\023\u0132\024\215\025\137\026\013\001\002\000\004\035" +
    "\u0134\001\002\000\004\002\uffe1\001\002\000\004\007\u0135" +
    "\001\002\000\004\011\u0136\001\002\000\004\002\uffe0\001" +
    "\002\000\006\014\305\015\142\001\002\000\006\014\305" +
    "\015\142\001\002\000\004\021\337\001\002\000\006\021" +
    "\074\045\016\001\002\000\004\023\u013c\001\002\000\004" +
    "\035\u013d\001\002\000\004\027\u013e\001\002\000\004\035" +
    "\u013f\001\002\000\004\007\u0140\001\002\000\004\011\u0141" +
    "\001\002\000\006\021\074\045\016\001\002\000\004\023" +
    "\u0143\001\002\000\004\035\u0144\001\002\000\004\027\u0145" +
    "\001\002\000\004\035\u0146\001\002\000\004\007\u0147\001" +
    "\002\000\004\011\u0148\001\002\000\006\021\074\045\016" +
    "\001\002\000\004\023\u014a\001\002\000\004\035\u014b\001" +
    "\002\000\004\027\u014c\001\002\000\004\035\u014d\001\002" +
    "\000\004\007\u014e\001\002\000\004\011\u014f\001\002\000" +
    "\006\021\074\045\016\001\002\000\004\023\u0151\001\002" +
    "\000\004\035\u0152\001\002\000\004\027\u0153\001\002\000" +
    "\004\035\u0154\001\002\000\004\007\u0155\001\002\000\004" +
    "\011\u0156\001\002\000\006\021\074\045\016\001\002\000" +
    "\004\026\013\001\002\000\004\023\u0159\001\002\000\004" +
    "\035\u015a\001\002\000\004\007\u015b\001\002\000\004\011" +
    "\u015c\001\002\000\004\011\u015d\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\001\001\002\000\006\007\u0160\053" +
    "\u0161\001\002\000\004\021\ufff6\001\002\000\004\035\u0162" +
    "\001\002\000\004\053\u0163\001\002\000\004\027\u0164\001" +
    "\002\000\004\007\u0165\001\002\000\004\021\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\030\002\005\003\022\004\006\005\014\010" +
    "\007\021\003\024\021\026\017\030\016\034\013\035\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0136\001\001\000\020\011\u0130\012\137" +
    "\013\145\015\142\016\140\017\133\021\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\303\012\302\024\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\027\027\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\034" +
    "\001\001\000\004\027\035\001\001\000\004\027\036\001" +
    "\001\000\004\027\037\001\001\000\004\027\040\001\001" +
    "\000\004\027\041\001\001\000\004\027\042\001\001\000" +
    "\004\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\063\027\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\072\024\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\074\001\001\000\002\001\001\000\004" +
    "\037\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\143\012" +
    "\137\013\145\015\142\016\140\017\133\021\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\215\016\213\017\210\020\216\021\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\217\001\001" +
    "\000\002\001\001\000\020\011\221\012\137\013\145\015" +
    "\142\016\140\017\133\021\134\001\001\000\014\015\215" +
    "\016\213\017\210\020\216\021\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\266\012\137\013\145\015\142\016\140\017\133\021" +
    "\134\001\001\000\014\015\215\016\213\017\210\020\216" +
    "\021\211\001\001\000\002\001\001\000\004\022\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\274" +
    "\012\137\013\145\015\142\016\140\017\133\021\134\001" +
    "\001\000\014\015\215\016\213\017\210\020\216\021\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\300\012\137\013\145\015\142\016\140\017\133\021\134" +
    "\001\001\000\014\015\215\016\213\017\210\020\216\021" +
    "\211\001\001\000\002\001\001\000\004\012\334\001\001" +
    "\000\004\012\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\312" +
    "\001\001\000\002\001\001\000\004\012\313\001\001\000" +
    "\004\013\314\001\001\000\004\032\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\335\001" +
    "\001\000\006\010\357\024\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\350\001\001\000" +
    "\004\006\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\366\024\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\375\024\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0104\024\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\u010b\024\021\001" +
    "\001\000\004\021\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u011a" +
    "\001\001\000\002\001\001\000\004\014\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0126" +
    "\001\001\000\002\001\001\000\004\014\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\u012b\012\137" +
    "\013\145\015\142\016\140\017\133\021\134\001\001\000" +
    "\014\015\215\016\213\017\210\020\216\021\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\215\016\213\017\210\020\216" +
    "\021\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0137\001\001\000\004\012\u0138\001\001\000\004\007" +
    "\u0139\001\001\000\006\010\u013a\024\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\u0141" +
    "\024\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u0148\024\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u014f\024" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u0156\024\021\001\001\000\004\021\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FINAL_BLOQUE_TRY_CATCH ::= LlaveC Catch ParentecisA exception Identificador ParentecisC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINAL_BLOQUE_TRY_CATCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INICIO_BLOQUE_TRY_CATCH ::= Try LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_BLOQUE_TRY_CATCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_FOR ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FOR ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FOR ::= Identificador Atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_FOR ::= Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_FOR ::= TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADO_METODO ::= Identificador ParentecisA ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion Identificador Punto LLAMADO_METODO FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ASIGNACION ::= Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= string Identificador Asignacion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= string Identificador Atribucion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= string Identificador Asignacion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= string Identificador Atribucion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= TipoDato Incremento Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= TipoDato Identificador Incremento FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= TipoDato Identificador Asignacion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= TipoDato Identificador Atribucion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= TipoDato Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO ::= INICIO_METODO SENTENCIA Return Identificador FinalLinea LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO ::= INICIO_METODO SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODO ::= INICIO_METODO LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTANCIACION_CLASE ::= Identificador Identificador Asignacion New Identificador ParentecisA New Identificador ParentecisA Identificador Punto Identificador ParentecisC ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CLASE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRINT ::= Identificador Punto Identificador Punto Identificador ParentecisA Comillas Identificador Identificador Identificador Identificador Comillas ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENTS_A ::= string CorcheteA CorcheteC Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENTS_A ::= string CorcheteA CorcheteC Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGUMENTS_A ::= string Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGUMENTS_A ::= string Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGUMENTS_A ::= TipoDato Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTS_A ::= TipoDato Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGUMENTS_A ::= ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGUMENTS ::= ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGUMENTS ::= ARGUMENTS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO_METODO ::= ACCESO_METODO Static Void Main ParentecisA ARGUMENTS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO_METODO ::= ACCESO_METODO TipoDato Identificador ParentecisA ARGUMENTS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ACCESO_METODO ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ACCESO_METODO ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONSTRUCTOR ::= Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO_CLASE ::= Public Class Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPORT ::= Import Identificador Punto Identificador Punto OperadorAritmetico FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPORT ::= Import Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PACKAGE_PATH ::= Package Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PACKAGE_PATH",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EJEMPLO_2 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE SENTENCIA LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EJEMPLO_1 ::= INICIO_CLASE INICIO_METODO DECLARACION INICIO_BLOQUE_TRY_CATCH DECLARACION DECLARACION_ASIGNACION FINAL_BLOQUE_TRY_CATCH LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASS ::= INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASS ::= PACKAGE_PATH INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROG ::= EJEMPLO_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROG ::= EJEMPLO_1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

