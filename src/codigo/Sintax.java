
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 08 20:58:36 COT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 08 20:58:36 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\052" +
    "\000\002\003\051\000\002\030\013\000\002\004\005\000" +
    "\002\005\006\000\002\006\006\000\002\007\017\000\002" +
    "\024\003\000\002\024\003\000\002\010\010\000\002\010" +
    "\011\000\002\025\003\000\002\025\013\000\002\027\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\007\000\002\027\007\000\002" +
    "\026\004\000\002\026\005\000\002\026\010\000\002\011" +
    "\003\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\005\000\002\011\004\000\002" +
    "\011\003\000\002\012\005\000\002\012\007\000\002\012" +
    "\007\000\002\012\006\000\002\012\006\000\002\012\010" +
    "\000\002\012\010\000\002\012\011\000\002\012\011\000" +
    "\002\013\006\000\002\013\007\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\015" +
    "\011\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\006\000\002\022\007\000" +
    "\002\016\015\000\002\017\011\000\002\020\013\000\002" +
    "\021\011\000\002\023\012\000\002\023\011\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\031\004" +
    "\000\002\032\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\012\020\011\021\010\026\012\045\015\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\u0130\001\002" +
    "\000\004\021\u0109\001\002\000\020\011\u0101\014\330\015" +
    "\065\016\320\025\322\026\012\035\131\001\002\000\010" +
    "\014\ufff5\022\376\043\ufff5\001\002\000\004\035\374\001" +
    "\002\000\004\005\254\001\002\000\012\014\067\015\065" +
    "\021\066\045\015\001\002\000\004\002\ufffd\001\002\000" +
    "\006\014\ufff4\043\ufff4\001\002\000\004\002\ufffe\001\002" +
    "\000\006\014\022\043\021\001\002\000\004\002\000\001" +
    "\002\000\004\044\056\001\002\000\004\035\023\001\002" +
    "\000\004\005\024\001\002\000\010\006\027\014\031\015" +
    "\026\001\002\000\004\010\055\001\002\000\006\035\045" +
    "\041\046\001\002\000\012\006\uffef\010\uffef\014\uffef\015" +
    "\uffef\001\002\000\012\006\027\010\ufff1\014\031\015\026" +
    "\001\002\000\004\035\032\001\002\000\006\006\034\013" +
    "\033\001\002\000\012\006\uffed\010\uffed\014\uffed\015\uffed" +
    "\001\002\000\012\006\uffee\010\uffee\014\uffee\015\uffee\001" +
    "\002\000\010\006\027\014\031\015\026\001\002\000\010" +
    "\006\027\014\031\015\026\001\002\000\010\006\027\014" +
    "\031\015\026\001\002\000\010\006\027\014\031\015\026" +
    "\001\002\000\010\006\027\014\031\015\026\001\002\000" +
    "\010\006\027\014\031\015\026\001\002\000\010\006\027" +
    "\014\031\015\026\001\002\000\004\010\ufff0\001\002\000" +
    "\006\006\054\013\053\001\002\000\004\042\047\001\002" +
    "\000\004\035\050\001\002\000\006\006\052\013\051\001" +
    "\002\000\012\006\uffe9\010\uffe9\014\uffe9\015\uffe9\001\002" +
    "\000\012\006\uffea\010\uffea\014\uffea\015\uffea\001\002\000" +
    "\012\006\uffeb\010\uffeb\014\uffeb\015\uffeb\001\002\000\012" +
    "\006\uffec\010\uffec\014\uffec\015\uffec\001\002\000\022\011" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\035\ufff3\001\002\000\004\046\057\001\002\000\004\005" +
    "\060\001\002\000\010\006\027\014\031\015\026\001\002" +
    "\000\004\010\062\001\002\000\022\011\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\023\ufff2\025\ufff2\026\ufff2\035\ufff2\001\002" +
    "\000\006\014\067\015\065\001\002\000\006\014\067\015" +
    "\065\001\002\000\004\035\105\001\002\000\006\014\ufff5" +
    "\043\ufff5\001\002\000\006\030\070\035\071\001\002\000" +
    "\004\035\103\001\002\000\012\007\074\030\072\032\073" +
    "\037\075\001\002\000\004\007\102\001\002\000\004\036" +
    "\100\001\002\000\030\011\uffda\014\uffda\015\uffda\016\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\035\uffda\047" +
    "\uffda\001\002\000\004\036\076\001\002\000\004\007\077" +
    "\001\002\000\030\011\uffd9\014\uffd9\015\uffd9\016\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\035\uffd9\047\uffd9" +
    "\001\002\000\004\007\101\001\002\000\030\011\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\035\uffd8\047\uffd8\001\002\000\030\011\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\035\uffd7\047\uffd7\001\002\000\004\007\104\001" +
    "\002\000\030\011\uffd6\014\uffd6\015\uffd6\016\uffd6\021\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\035\uffd6\047\uffd6\001" +
    "\002\000\006\032\106\037\107\001\002\000\004\012\116" +
    "\001\002\000\004\012\110\001\002\000\006\012\111\035" +
    "\112\001\002\000\004\007\115\001\002\000\004\012\113" +
    "\001\002\000\004\007\114\001\002\000\030\011\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\035\uffd3\047\uffd3\001\002\000\030\011\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\035\uffd5\047\uffd5\001\002\000\006\012\117\035" +
    "\120\001\002\000\004\007\123\001\002\000\004\012\121" +
    "\001\002\000\004\007\122\001\002\000\030\011\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\035\uffd2\047\uffd2\001\002\000\030\011\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\035\uffd4\047\uffd4\001\002\000\004\047\125\001" +
    "\002\000\004\010\165\001\002\000\006\014\067\015\065" +
    "\001\002\000\006\014\132\035\131\001\002\000\004\011" +
    "\152\001\002\000\004\032\147\001\002\000\004\035\133" +
    "\001\002\000\004\032\134\001\002\000\006\035\137\036" +
    "\135\001\002\000\004\027\144\001\002\000\004\007\143" +
    "\001\002\000\004\027\140\001\002\000\006\035\142\036" +
    "\141\001\002\000\004\007\uffcd\001\002\000\004\007\uffcf" +
    "\001\002\000\016\011\uffd0\016\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\001\002\000\006\035\146\036\145\001\002" +
    "\000\004\007\uffce\001\002\000\004\007\uffcc\001\002\000" +
    "\006\035\137\036\135\001\002\000\004\007\151\001\002" +
    "\000\016\011\uffd1\016\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\001\002\000\004\050\156\001\002\000\004\011\154" +
    "\001\002\000\004\011\155\001\002\000\004\002\ufffa\001" +
    "\002\000\004\005\157\001\002\000\004\051\160\001\002" +
    "\000\004\035\161\001\002\000\004\006\162\001\002\000" +
    "\004\010\163\001\002\000\004\011\164\001\002\000\004" +
    "\011\uffba\001\002\000\006\014\uffbb\015\uffbb\001\002\000" +
    "\004\021\170\001\002\000\006\021\066\045\015\001\002" +
    "\000\004\035\171\001\002\000\004\005\172\001\002\000" +
    "\004\014\173\001\002\000\004\035\174\001\002\000\004" +
    "\013\175\001\002\000\004\014\176\001\002\000\004\035" +
    "\177\001\002\000\004\006\200\001\002\000\004\010\201" +
    "\001\002\000\004\035\203\001\002\000\004\035\203\001" +
    "\002\000\004\032\204\001\002\000\004\035\205\001\002" +
    "\000\004\007\206\001\002\000\006\011\ufff7\035\ufff7\001" +
    "\002\000\004\011\210\001\002\000\006\021\ufff6\045\ufff6" +
    "\001\002\000\004\023\212\001\002\000\004\035\213\001" +
    "\002\000\004\027\214\001\002\000\004\035\215\001\002" +
    "\000\004\007\216\001\002\000\004\011\217\001\002\000" +
    "\006\021\066\045\015\001\002\000\004\023\221\001\002" +
    "\000\004\035\222\001\002\000\004\027\223\001\002\000" +
    "\004\035\224\001\002\000\004\007\225\001\002\000\004" +
    "\011\226\001\002\000\006\021\066\045\015\001\002\000" +
    "\004\023\230\001\002\000\004\035\231\001\002\000\004" +
    "\027\232\001\002\000\004\035\233\001\002\000\004\007" +
    "\234\001\002\000\004\011\235\001\002\000\006\021\066" +
    "\045\015\001\002\000\004\023\237\001\002\000\004\035" +
    "\240\001\002\000\004\027\241\001\002\000\004\035\242" +
    "\001\002\000\004\007\243\001\002\000\004\011\244\001" +
    "\002\000\006\021\066\045\015\001\002\000\004\026\012" +
    "\001\002\000\004\023\247\001\002\000\004\035\250\001" +
    "\002\000\004\007\251\001\002\000\004\011\252\001\002" +
    "\000\004\011\253\001\002\000\004\002\ufffb\001\002\000" +
    "\006\014\257\035\256\001\002\000\004\006\315\001\002" +
    "\000\004\032\307\001\002\000\004\035\260\001\002\000" +
    "\004\032\261\001\002\000\004\036\262\001\002\000\004" +
    "\007\263\001\002\000\006\035\266\040\264\001\002\000" +
    "\006\006\uffca\007\uffca\001\002\000\004\007\277\001\002" +
    "\000\004\033\267\001\002\000\012\012\271\035\273\036" +
    "\270\040\272\001\002\000\006\006\uffc8\007\uffc8\001\002" +
    "\000\006\012\274\035\275\001\002\000\006\006\uffc9\007" +
    "\uffc9\001\002\000\006\006\uffc7\007\uffc7\001\002\000\006" +
    "\006\uffc6\007\uffc6\001\002\000\004\012\276\001\002\000" +
    "\006\006\uffc5\007\uffc5\001\002\000\006\030\300\035\302" +
    "\001\002\000\004\035\306\001\002\000\004\006\uffc0\001" +
    "\002\000\006\030\303\037\304\001\002\000\004\006\uffbd" +
    "\001\002\000\004\036\305\001\002\000\004\006\uffbe\001" +
    "\002\000\004\006\uffbc\001\002\000\004\036\310\001\002" +
    "\000\004\007\311\001\002\000\006\035\266\040\264\001" +
    "\002\000\004\007\313\001\002\000\006\030\300\035\302" +
    "\001\002\000\004\006\uffbf\001\002\000\004\010\316\001" +
    "\002\000\016\014\330\015\065\016\320\025\322\026\012" +
    "\035\131\001\002\000\016\011\uffde\016\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\001\002\000\004\005\362\001\002" +
    "\000\016\011\uffdb\016\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\001\002\000\004\005\354\001\002\000\016\011\uffe4" +
    "\016\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\001\002\000" +
    "\016\011\uffe0\016\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\001\002\000\016\011\uffe2\016\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\001\002\000\014\011\336\016\320\024\340" +
    "\025\322\026\012\001\002\000\016\011\uffe5\016\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\001\002\000\006\030\070" +
    "\035\331\001\002\000\012\007\074\030\072\032\332\037" +
    "\075\001\002\000\006\035\137\036\333\001\002\000\006" +
    "\007\101\027\144\001\002\000\016\011\uffdf\016\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\001\002\000\016\011\uffdc" +
    "\016\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\001\002\000" +
    "\020\002\uffc1\011\uffc1\016\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\001\002\000\016\011\uffe1\016\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\001\002\000\004\010\344\001\002" +
    "\000\016\011\uffe3\016\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\001\002\000\004\024\340\001\002\000\016\011\uffdd" +
    "\016\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\001\002\000" +
    "\016\014\330\015\065\016\320\025\322\026\012\035\131" +
    "\001\002\000\014\011\346\016\320\024\340\025\322\026" +
    "\012\001\002\000\004\025\347\001\002\000\004\005\350" +
    "\001\002\000\006\035\266\040\264\001\002\000\004\006" +
    "\352\001\002\000\004\007\353\001\002\000\016\011\uffc2" +
    "\016\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\001\002\000" +
    "\006\035\266\040\264\001\002\000\004\006\356\001\002" +
    "\000\004\010\357\001\002\000\016\014\330\015\065\016" +
    "\320\025\322\026\012\035\131\001\002\000\014\011\361" +
    "\016\320\024\340\025\322\026\012\001\002\000\016\011" +
    "\uffc3\016\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\001\002" +
    "\000\006\035\266\040\264\001\002\000\004\006\364\001" +
    "\002\000\004\010\365\001\002\000\016\014\330\015\065" +
    "\016\320\025\322\026\012\035\131\001\002\000\014\011" +
    "\367\016\320\024\340\025\322\026\012\001\002\000\020" +
    "\011\uffcb\016\uffcb\017\370\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\001\002\000\004\010\371\001\002\000\016\014\330" +
    "\015\065\016\320\025\322\026\012\035\131\001\002\000" +
    "\014\011\373\016\320\024\340\025\322\026\012\001\002" +
    "\000\016\011\uffc4\016\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\001\002\000\004\007\375\001\002\000\004\021\ufff9" +
    "\001\002\000\004\035\377\001\002\000\004\010\u0100\001" +
    "\002\000\012\014\ufff8\015\ufff8\021\ufff8\045\ufff8\001\002" +
    "\000\004\002\uffe8\001\002\000\016\011\u0104\016\320\023" +
    "\u0103\024\340\025\322\026\012\001\002\000\004\035\u0105" +
    "\001\002\000\004\002\uffe7\001\002\000\004\007\u0106\001" +
    "\002\000\004\011\u0107\001\002\000\004\002\uffe6\001\002" +
    "\000\006\014\067\015\065\001\002\000\004\022\376\001" +
    "\002\000\006\014\067\015\065\001\002\000\004\021\170" +
    "\001\002\000\006\021\066\045\015\001\002\000\004\023" +
    "\u010e\001\002\000\004\035\u010f\001\002\000\004\027\u0110" +
    "\001\002\000\004\035\u0111\001\002\000\004\007\u0112\001" +
    "\002\000\004\011\u0113\001\002\000\006\021\066\045\015" +
    "\001\002\000\004\023\u0115\001\002\000\004\035\u0116\001" +
    "\002\000\004\027\u0117\001\002\000\004\035\u0118\001\002" +
    "\000\004\007\u0119\001\002\000\004\011\u011a\001\002\000" +
    "\006\021\066\045\015\001\002\000\004\023\u011c\001\002" +
    "\000\004\035\u011d\001\002\000\004\027\u011e\001\002\000" +
    "\004\035\u011f\001\002\000\004\007\u0120\001\002\000\004" +
    "\011\u0121\001\002\000\006\021\066\045\015\001\002\000" +
    "\004\023\u0123\001\002\000\004\035\u0124\001\002\000\004" +
    "\027\u0125\001\002\000\004\035\u0126\001\002\000\004\007" +
    "\u0127\001\002\000\004\011\u0128\001\002\000\006\021\066" +
    "\045\015\001\002\000\004\026\012\001\002\000\004\023" +
    "\u012b\001\002\000\004\035\u012c\001\002\000\004\007\u012d" +
    "\001\002\000\004\011\u012e\001\002\000\004\011\u012f\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\024\002\004\003\017\004\005\005\012\010" +
    "\006\021\003\024\016\026\015\030\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0107\001\001\000" +
    "\020\011\u0101\012\322\013\326\015\324\016\323\017\316" +
    "\021\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\063\012\062\024\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\024\027\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\035" +
    "\001\001\000\004\027\036\001\001\000\004\027\037\001" +
    "\001\000\004\027\040\001\001\000\004\027\041\001\001" +
    "\000\004\027\042\001\001\000\004\027\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\060\027" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\165\001\001\000\004\012\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\125\001\001\000\002\001" +
    "\001\000\004\012\126\001\001\000\004\013\127\001\001" +
    "\000\004\032\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\166" +
    "\001\001\000\006\010\210\024\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\201\001\001" +
    "\000\004\006\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\217\024\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\226\024" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\235\024\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\244\024\016" +
    "\001\001\000\004\021\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\311\001\001\000\002\001\001\000\004\014\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\325" +
    "\012\322\013\326\015\324\016\323\017\316\021\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\340\016\336\017\333\020\341" +
    "\021\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\342\001\001\000\002\001\001\000\020\011\344\012" +
    "\322\013\326\015\324\016\323\017\316\021\320\001\001" +
    "\000\014\015\340\016\336\017\333\020\341\021\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\357\012\322\013\326\015\324\016" +
    "\323\017\316\021\320\001\001\000\014\015\340\016\336" +
    "\017\333\020\341\021\334\001\001\000\002\001\001\000" +
    "\004\022\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\365\012\322\013\326\015\324\016\323\017" +
    "\316\021\320\001\001\000\014\015\340\016\336\017\333" +
    "\020\341\021\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\371\012\322\013\326\015\324\016\323" +
    "\017\316\021\320\001\001\000\014\015\340\016\336\017" +
    "\333\020\341\021\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\340" +
    "\016\336\017\333\020\341\021\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0109\001\001\000\002\001" +
    "\001\000\004\012\u010a\001\001\000\004\007\u010b\001\001" +
    "\000\006\010\u010c\024\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\u0113\024\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u011a\024\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0121\024\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u0128\024\016\001\001\000\004\021\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FINAL_BLOQUE_TRY_CATCH ::= LlaveC Catch ParentecisA exception Identificador ParentecisC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINAL_BLOQUE_TRY_CATCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INICIO_BLOQUE_TRY_CATCH ::= Try LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_BLOQUE_TRY_CATCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_FOR ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_FOR ::= Identificador Atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_FOR ::= Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_FOR ::= TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ASIGNACION ::= Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= string Identificador Asignacion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= string Identificador Atribucion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= string Identificador Asignacion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= string Identificador Atribucion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= TipoDato Incremento Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= TipoDato Identificador Incremento FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= TipoDato Identificador Asignacion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= TipoDato Identificador Atribucion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= TipoDato Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO ::= INICIO_METODO SENTENCIA Return Identificador FinalLinea LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO ::= INICIO_METODO SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODO ::= INICIO_METODO LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGUMENTS_A ::= string CorcheteA CorcheteC Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGUMENTS_A ::= string CorcheteA CorcheteC Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGUMENTS_A ::= string Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGUMENTS_A ::= string Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGUMENTS_A ::= TipoDato Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARGUMENTS_A ::= TipoDato Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTS_A ::= ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTS ::= ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A ARGUMENTS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENTS ::= ARGUMENTS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO_METODO ::= ACCESO_METODO Static Void Main ParentecisA ARGUMENTS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO_METODO ::= ACCESO_METODO TipoDato Identificador ParentecisA ARGUMENTS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ACCESO_METODO ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ACCESO_METODO ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONSTRUCTOR ::= Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO_CLASE ::= Public Class Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PACKAGE_PATH ::= Package Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PACKAGE_PATH",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EJEMPLO_1 ::= INICIO_CLASE INICIO_METODO DECLARACION INICIO_BLOQUE_TRY_CATCH DECLARACION DECLARACION_ASIGNACION FINAL_BLOQUE_TRY_CATCH LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASS ::= INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASS ::= PACKAGE_PATH INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROG ::= EJEMPLO_1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

