
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 30 19:11:35 COT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 30 19:11:35 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\052\000\002\003" +
    "\005\000\002\004\006\000\002\005\006\000\002\006\017" +
    "\000\002\007\010\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\010" +
    "\005\000\002\010\004\000\002\010\003\000\002\011\005" +
    "\000\002\011\007\000\002\011\007\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\011\000\002\011\011\000\002\012\010\000\002\014" +
    "\011\000\002\021\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\006\000\002\021\007\000" +
    "\002\015\015\000\002\016\011\000\002\017\013\000\002" +
    "\020\011\000\002\022\012\000\002\022\011\000\002\013" +
    "\005\000\002\013\004\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\020\006\001\002\000\004\021\013\001" +
    "\002\000\004\002\011\001\002\000\004\035\007\001\002" +
    "\000\004\007\010\001\002\000\004\021\uffff\001\002\000" +
    "\004\002\001\001\002\000\006\014\021\015\020\001\002" +
    "\000\004\022\014\001\002\000\004\035\015\001\002\000" +
    "\004\010\016\001\002\000\006\014\ufffe\015\ufffe\001\002" +
    "\000\006\014\021\015\020\001\002\000\004\035\037\001" +
    "\002\000\006\030\022\035\023\001\002\000\004\035\035" +
    "\001\002\000\012\007\026\030\024\032\025\037\027\001" +
    "\002\000\004\007\034\001\002\000\004\036\032\001\002" +
    "\000\022\011\uffef\014\uffef\015\uffef\016\uffef\021\uffef\024" +
    "\uffef\025\uffef\026\uffef\001\002\000\004\036\030\001\002" +
    "\000\004\007\031\001\002\000\022\011\uffee\014\uffee\015" +
    "\uffee\016\uffee\021\uffee\024\uffee\025\uffee\026\uffee\001\002" +
    "\000\004\007\033\001\002\000\022\011\uffed\014\uffed\015" +
    "\uffed\016\uffed\021\uffed\024\uffed\025\uffed\026\uffed\001\002" +
    "\000\022\011\uffec\014\uffec\015\uffec\016\uffec\021\uffec\024" +
    "\uffec\025\uffec\026\uffec\001\002\000\004\007\036\001\002" +
    "\000\022\011\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\001\002\000\006\032\040\037\041" +
    "\001\002\000\004\012\050\001\002\000\004\012\042\001" +
    "\002\000\006\012\043\035\044\001\002\000\004\007\047" +
    "\001\002\000\004\012\045\001\002\000\004\007\046\001" +
    "\002\000\022\011\uffe8\014\uffe8\015\uffe8\016\uffe8\021\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\001\002\000\022\011\uffea\014" +
    "\uffea\015\uffea\016\uffea\021\uffea\024\uffea\025\uffea\026\uffea" +
    "\001\002\000\006\012\051\035\052\001\002\000\004\007" +
    "\055\001\002\000\004\012\053\001\002\000\004\007\054" +
    "\001\002\000\022\011\uffe7\014\uffe7\015\uffe7\016\uffe7\021" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\001\002\000\022\011\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\021\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\001\002\000\004\021\060\001\002\000\004\021\102" +
    "\001\002\000\004\035\061\001\002\000\004\005\062\001" +
    "\002\000\004\014\063\001\002\000\004\035\064\001\002" +
    "\000\004\013\065\001\002\000\004\014\066\001\002\000" +
    "\004\035\067\001\002\000\004\006\070\001\002\000\004" +
    "\010\071\001\002\000\004\035\073\001\002\000\004\035" +
    "\073\001\002\000\004\032\074\001\002\000\004\035\075" +
    "\001\002\000\004\007\076\001\002\000\006\011\ufffd\035" +
    "\ufffd\001\002\000\004\011\100\001\002\000\004\021\ufffc" +
    "\001\002\000\004\023\110\001\002\000\004\014\103\001" +
    "\002\000\004\035\104\001\002\000\004\005\105\001\002" +
    "\000\004\006\106\001\002\000\004\010\107\001\002\000" +
    "\006\023\ufffb\026\ufffb\001\002\000\004\035\111\001\002" +
    "\000\004\027\112\001\002\000\004\035\113\001\002\000" +
    "\004\007\114\001\002\000\004\011\115\001\002\000\004" +
    "\021\102\001\002\000\004\023\117\001\002\000\004\035" +
    "\120\001\002\000\004\027\121\001\002\000\004\035\122" +
    "\001\002\000\004\007\123\001\002\000\004\011\124\001" +
    "\002\000\004\021\102\001\002\000\004\023\126\001\002" +
    "\000\004\035\127\001\002\000\004\027\130\001\002\000" +
    "\004\035\131\001\002\000\004\007\132\001\002\000\004" +
    "\011\133\001\002\000\004\021\102\001\002\000\004\023" +
    "\135\001\002\000\004\035\136\001\002\000\004\027\137" +
    "\001\002\000\004\035\140\001\002\000\004\007\141\001" +
    "\002\000\004\011\142\001\002\000\004\021\102\001\002" +
    "\000\004\026\144\001\002\000\004\005\153\001\002\000" +
    "\004\023\146\001\002\000\004\035\147\001\002\000\004" +
    "\007\150\001\002\000\004\011\151\001\002\000\004\011" +
    "\152\001\002\000\004\002\000\001\002\000\006\014\156" +
    "\035\155\001\002\000\004\006\214\001\002\000\004\032" +
    "\206\001\002\000\004\035\157\001\002\000\004\032\160" +
    "\001\002\000\004\036\161\001\002\000\004\007\162\001" +
    "\002\000\006\035\165\040\163\001\002\000\006\006\uffe4" +
    "\007\uffe4\001\002\000\004\007\176\001\002\000\004\033" +
    "\166\001\002\000\012\012\170\035\172\036\167\040\171" +
    "\001\002\000\006\006\uffe2\007\uffe2\001\002\000\006\012" +
    "\173\035\174\001\002\000\006\006\uffe3\007\uffe3\001\002" +
    "\000\006\006\uffe1\007\uffe1\001\002\000\006\006\uffe0\007" +
    "\uffe0\001\002\000\004\012\175\001\002\000\006\006\uffdf" +
    "\007\uffdf\001\002\000\006\030\177\035\201\001\002\000" +
    "\004\035\205\001\002\000\004\006\uffda\001\002\000\006" +
    "\030\202\037\203\001\002\000\004\006\uffd7\001\002\000" +
    "\004\036\204\001\002\000\004\006\uffd8\001\002\000\004" +
    "\006\uffd6\001\002\000\004\036\207\001\002\000\004\007" +
    "\210\001\002\000\006\035\165\040\163\001\002\000\004" +
    "\007\212\001\002\000\006\030\177\035\201\001\002\000" +
    "\004\006\uffd9\001\002\000\004\010\215\001\002\000\016" +
    "\014\021\015\020\016\220\025\221\026\144\035\226\001" +
    "\002\000\014\011\ufff3\016\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\001\002\000\014\011\ufff0\016\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\001\002\000\004\005\263\001\002\000\004\005\255" +
    "\001\002\000\014\011\ufff9\016\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\001\002\000\014\011\ufff5\016\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\001\002\000\014\011\ufff7\016\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\001\002\000\014\011\237\016\220\024\241" +
    "\025\221\026\144\001\002\000\004\032\230\001\002\000" +
    "\014\011\ufffa\016\ufffa\024\ufffa\025\ufffa\026\ufffa\001\002" +
    "\000\004\035\231\001\002\000\004\027\232\001\002\000" +
    "\004\035\233\001\002\000\004\007\234\001\002\000\014" +
    "\011\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6\001\002\000" +
    "\014\011\ufff4\016\ufff4\024\ufff4\025\ufff4\026\ufff4\001\002" +
    "\000\014\011\ufff1\016\ufff1\024\ufff1\025\ufff1\026\ufff1\001" +
    "\002\000\016\011\uffdb\016\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\001\002\000\014\011\ufff6\016\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\001\002\000\004\010\245\001\002\000\014" +
    "\011\ufff8\016\ufff8\024\ufff8\025\ufff8\026\ufff8\001\002\000" +
    "\004\024\241\001\002\000\014\011\ufff2\016\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\001\002\000\016\014\021\015\020\016" +
    "\220\025\221\026\144\035\226\001\002\000\014\011\247" +
    "\016\220\024\241\025\221\026\144\001\002\000\004\025" +
    "\250\001\002\000\004\005\251\001\002\000\006\035\165" +
    "\040\163\001\002\000\004\006\253\001\002\000\004\007" +
    "\254\001\002\000\014\011\uffdc\016\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\001\002\000\006\035\165\040\163\001\002\000" +
    "\004\006\257\001\002\000\004\010\260\001\002\000\016" +
    "\014\021\015\020\016\220\025\221\026\144\035\226\001" +
    "\002\000\014\011\262\016\220\024\241\025\221\026\144" +
    "\001\002\000\014\011\uffdd\016\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\001\002\000\006\035\165\040\163\001\002\000\004" +
    "\006\265\001\002\000\004\010\266\001\002\000\016\014" +
    "\021\015\020\016\220\025\221\026\144\035\226\001\002" +
    "\000\014\011\270\016\220\024\241\025\221\026\144\001" +
    "\002\000\016\011\uffe5\016\uffe5\017\271\024\uffe5\025\uffe5" +
    "\026\uffe5\001\002\000\004\010\272\001\002\000\016\014" +
    "\021\015\020\016\220\025\221\026\144\035\226\001\002" +
    "\000\014\011\274\016\220\024\241\025\221\026\144\001" +
    "\002\000\014\011\uffde\016\uffde\024\uffde\025\uffde\026\uffde" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\002\004\003\003\001\001\000\004\004" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\056\001\001\000\004\007\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\071\001\001\000\004\005\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\142\001\001\000\004\020\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\210" +
    "\001\001\000\002\001\001\000\004\013\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\224\011\221" +
    "\012\226\014\223\015\222\016\215\020\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\241\015\237\016\234\017\242\020\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\243\001\001\000\002\001\001\000" +
    "\020\010\245\011\221\012\226\014\223\015\222\016\215" +
    "\020\216\001\001\000\014\014\241\015\237\016\234\017" +
    "\242\020\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\260\011\221\012" +
    "\226\014\223\015\222\016\215\020\216\001\001\000\014" +
    "\014\241\015\237\016\234\017\242\020\235\001\001\000" +
    "\002\001\001\000\004\021\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\266\011\221\012\226\014" +
    "\223\015\222\016\215\020\216\001\001\000\014\014\241" +
    "\015\237\016\234\017\242\020\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\272\011\221\012\226" +
    "\014\223\015\222\016\215\020\216\001\001\000\014\014" +
    "\241\015\237\016\234\017\242\020\235\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FOR ::= Identificador Atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_ASIGNACION ::= Identificador Asignacion Identificador OperadorAritmetico Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= string Identificador Asignacion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= string Identificador Atribucion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= string Identificador Asignacion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= string Identificador Atribucion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TipoDato Incremento Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TipoDato Identificador Incremento FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TipoDato Identificador Asignacion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= TipoDato Identificador Atribucion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= TipoDato Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO_METODO ::= Public TipoDato Identificador ParentecisA ParentecisC LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONSTRUCTOR ::= Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ASIGNACION ::= Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_CLASE ::= Public Class Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORT ::= Package Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CLASS ::= IMPORT INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CLASS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

