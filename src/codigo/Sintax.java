
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 10 19:37:51 COT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 10 19:37:51 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\052\000\002\003\051\000" +
    "\002\030\013\000\002\034\012\000\002\041\020\000\002" +
    "\041\021\000\002\004\005\000\002\035\005\000\002\035" +
    "\011\000\002\005\006\000\002\006\006\000\002\007\017" +
    "\000\002\024\003\000\002\024\003\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\025\003\000\002" +
    "\025\004\000\002\025\005\000\002\025\006\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\007\000\002\027\007\000" +
    "\002\043\003\000\002\043\005\000\002\036\020\000\002" +
    "\036\023\000\002\037\021\000\002\026\004\000\002\026" +
    "\005\000\002\026\010\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\005\000\002\011\004\000\002\011\003\000\002\012" +
    "\005\000\002\012\007\000\002\012\007\000\002\012\006" +
    "\000\002\012\006\000\002\012\010\000\002\012\010\000" +
    "\002\012\011\000\002\012\011\000\002\013\006\000\002" +
    "\013\007\000\002\013\011\000\002\013\007\000\002\042" +
    "\012\000\002\040\005\000\002\040\007\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\015\011\000\002\022\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\006\000\002\022" +
    "\007\000\002\016\015\000\002\017\011\000\002\020\013" +
    "\000\002\021\011\000\002\023\012\000\002\023\011\000" +
    "\002\014\005\000\002\014\004\000\002\014\004\000\002" +
    "\031\004\000\002\032\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\014\020\012\021\011\026\013\045\020\052" +
    "\005\001\002\000\004\002\uffff\001\002\000\004\035\u0185" +
    "\001\002\000\004\002\u0184\001\002\000\004\021\067\001" +
    "\002\000\020\011\u0156\014\167\015\162\016\154\025\156" +
    "\026\013\035\165\001\002\000\010\014\uffee\022\070\043" +
    "\uffee\001\002\000\004\035\u0154\001\002\000\004\005\u0139" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\ufffc\001" +
    "\002\000\012\014\202\015\162\021\074\045\020\001\002" +
    "\000\004\002\ufffd\001\002\000\006\014\uffed\043\uffed\001" +
    "\002\000\004\002\ufffe\001\002\000\004\021\067\001\002" +
    "\000\006\014\026\043\025\001\002\000\004\002\000\001" +
    "\002\000\004\044\055\001\002\000\004\035\027\001\002" +
    "\000\004\005\030\001\002\000\010\006\032\014\034\015" +
    "\031\001\002\000\006\035\045\041\046\001\002\000\012" +
    "\006\uffe5\010\uffe5\014\uffe5\015\uffe5\001\002\000\012\006" +
    "\032\010\uffe9\014\034\015\031\001\002\000\004\035\037" +
    "\001\002\000\004\010\036\001\002\000\022\011\uffec\014" +
    "\uffec\015\uffec\016\uffec\023\uffec\025\uffec\026\uffec\035\uffec" +
    "\001\002\000\006\006\041\013\040\001\002\000\012\006" +
    "\uffe3\010\uffe3\014\uffe3\015\uffe3\001\002\000\012\006\uffe4" +
    "\010\uffe4\014\uffe4\015\uffe4\001\002\000\012\006\032\010" +
    "\uffe8\014\034\015\031\001\002\000\012\006\032\010\uffe7" +
    "\014\034\015\031\001\002\000\004\010\uffe6\001\002\000" +
    "\006\006\054\013\053\001\002\000\004\042\047\001\002" +
    "\000\004\035\050\001\002\000\006\006\052\013\051\001" +
    "\002\000\012\006\uffdf\010\uffdf\014\uffdf\015\uffdf\001\002" +
    "\000\012\006\uffe0\010\uffe0\014\uffe0\015\uffe0\001\002\000" +
    "\012\006\uffe1\010\uffe1\014\uffe1\015\uffe1\001\002\000\012" +
    "\006\uffe2\010\uffe2\014\uffe2\015\uffe2\001\002\000\006\035" +
    "\057\046\056\001\002\000\004\005\063\001\002\000\004" +
    "\005\060\001\002\000\010\006\032\014\034\015\031\001" +
    "\002\000\004\010\062\001\002\000\022\011\uffea\014\uffea" +
    "\015\uffea\016\uffea\023\uffea\025\uffea\026\uffea\035\uffea\001" +
    "\002\000\010\006\032\014\034\015\031\001\002\000\004" +
    "\010\065\001\002\000\022\011\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\023\uffeb\025\uffeb\026\uffeb\035\uffeb\001\002\000\006" +
    "\021\074\045\020\001\002\000\004\022\070\001\002\000" +
    "\004\035\071\001\002\000\004\010\072\001\002\000\012" +
    "\014\ufff1\015\ufff1\021\ufff1\045\ufff1\001\002\000\004\035" +
    "\076\001\002\000\006\014\uffee\043\uffee\001\002\000\004" +
    "\035\134\001\002\000\004\053\077\001\002\000\004\035" +
    "\100\001\002\000\004\053\101\001\002\000\004\035\102" +
    "\001\002\000\004\005\103\001\002\000\004\012\104\001" +
    "\002\000\004\035\105\001\002\000\004\035\106\001\002" +
    "\000\004\035\107\001\002\000\006\012\110\035\111\001" +
    "\002\000\004\027\115\001\002\000\004\012\112\001\002" +
    "\000\004\006\113\001\002\000\004\007\114\001\002\000" +
    "\006\011\uffdc\035\uffdc\001\002\000\004\005\116\001\002" +
    "\000\006\035\121\036\117\001\002\000\004\027\130\001" +
    "\002\000\004\006\125\001\002\000\004\027\122\001\002" +
    "\000\006\035\124\036\123\001\002\000\006\006\uffb9\007" +
    "\uffb9\001\002\000\006\006\uffbb\007\uffbb\001\002\000\004" +
    "\006\126\001\002\000\004\007\127\001\002\000\006\011" +
    "\uffdb\035\uffdb\001\002\000\006\035\132\036\131\001\002" +
    "\000\006\006\uffba\007\uffba\001\002\000\006\006\uffb8\007" +
    "\uffb8\001\002\000\020\014\167\015\162\016\154\025\156" +
    "\026\013\035\165\047\160\001\002\000\004\035\135\001" +
    "\002\000\004\032\136\001\002\000\004\054\137\001\002" +
    "\000\004\035\140\001\002\000\004\005\141\001\002\000" +
    "\004\054\142\001\002\000\004\035\143\001\002\000\004" +
    "\005\144\001\002\000\004\035\145\001\002\000\004\053" +
    "\146\001\002\000\004\035\147\001\002\000\004\006\150" +
    "\001\002\000\004\006\151\001\002\000\004\007\152\001" +
    "\002\000\020\014\uffda\015\uffda\016\uffda\025\uffda\026\uffda" +
    "\035\uffda\047\uffda\001\002\000\024\011\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\035\uffcf" +
    "\001\002\000\004\005\355\001\002\000\024\011\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\035\uffcc\001\002\000\004\005\347\001\002\000\024\011" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\035\uffd5\001\002\000\004\010\346\001\002\000" +
    "\024\011\uffd1\014\uffd1\015\uffd1\016\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\035\uffd1\001\002\000\004\035\327\001" +
    "\002\000\024\011\uffd3\014\uffd3\015\uffd3\016\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\035\uffd3\001\002\000\014\011" +
    "\325\016\154\024\177\025\156\026\013\001\002\000\004" +
    "\032\322\001\002\000\024\011\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\035\uffd6\001\002" +
    "\000\006\030\205\035\301\001\002\000\016\014\167\015" +
    "\162\016\154\025\156\026\013\035\165\001\002\000\020" +
    "\014\202\015\162\016\154\024\177\025\156\026\013\035" +
    "\201\001\002\000\024\011\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\035\uffd0\001\002\000" +
    "\004\011\255\001\002\000\024\011\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\035\uffcd\001" +
    "\002\000\004\035\201\001\002\000\024\011\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\035" +
    "\uffd2\001\002\000\004\010\232\001\002\000\024\011\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\035\uffd4\001\002\000\004\005\222\001\002\000\006" +
    "\030\205\035\206\001\002\000\004\024\177\001\002\000" +
    "\024\011\uffce\014\uffce\015\uffce\016\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\035\uffce\001\002\000\004\035\220\001" +
    "\002\000\012\007\211\030\207\032\210\037\212\001\002" +
    "\000\004\007\217\001\002\000\004\036\215\001\002\000" +
    "\030\011\uffcb\014\uffcb\015\uffcb\016\uffcb\021\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\035\uffcb\047\uffcb\001\002\000" +
    "\004\036\213\001\002\000\004\007\214\001\002\000\030" +
    "\011\uffca\014\uffca\015\uffca\016\uffca\021\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\035\uffca\047\uffca\001\002\000\004" +
    "\007\216\001\002\000\030\011\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\035\uffc9" +
    "\047\uffc9\001\002\000\030\011\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\035\uffc8" +
    "\047\uffc8\001\002\000\004\007\221\001\002\000\030\011" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\021\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\035\uffc7\047\uffc7\001\002\000\006\006" +
    "\224\035\225\001\002\000\004\006\230\001\002\000\010" +
    "\006\uffbd\007\uffbd\011\uffbd\001\002\000\006\006\uffde\013" +
    "\226\001\002\000\004\035\227\001\002\000\004\006\uffdd" +
    "\001\002\000\004\007\231\001\002\000\010\006\uffbc\007" +
    "\uffbc\011\uffbc\001\002\000\016\014\167\015\162\016\154" +
    "\025\156\026\013\035\165\001\002\000\014\011\234\016" +
    "\154\024\177\025\156\026\013\001\002\000\004\025\235" +
    "\001\002\000\004\005\236\001\002\000\006\035\241\040" +
    "\237\001\002\000\006\006\uffb6\007\uffb6\001\002\000\004" +
    "\006\252\001\002\000\004\033\242\001\002\000\012\012" +
    "\244\035\246\036\243\040\245\001\002\000\006\006\uffb4" +
    "\007\uffb4\001\002\000\006\012\247\035\250\001\002\000" +
    "\006\006\uffb5\007\uffb5\001\002\000\006\006\uffb3\007\uffb3" +
    "\001\002\000\006\006\uffb2\007\uffb2\001\002\000\004\012" +
    "\251\001\002\000\006\006\uffb1\007\uffb1\001\002\000\004" +
    "\007\253\001\002\000\024\011\uffae\014\uffae\015\uffae\016" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\035\uffae\001\002" +
    "\000\004\011\255\001\002\000\004\050\264\001\002\000" +
    "\004\011\257\001\002\000\006\021\074\045\020\001\002" +
    "\000\004\035\076\001\002\000\004\011\262\001\002\000" +
    "\004\011\263\001\002\000\004\002\ufff5\001\002\000\004" +
    "\005\265\001\002\000\004\051\266\001\002\000\004\035" +
    "\267\001\002\000\004\006\270\001\002\000\004\010\271" +
    "\001\002\000\004\011\272\001\002\000\004\011\uffa6\001" +
    "\002\000\004\011\274\001\002\000\006\021\074\045\020" +
    "\001\002\000\004\035\076\001\002\000\004\011\277\001" +
    "\002\000\004\011\300\001\002\000\004\002\ufff6\001\002" +
    "\000\012\007\211\030\207\032\302\037\212\001\002\000" +
    "\006\035\306\036\303\001\002\000\006\007\216\027\130" +
    "\001\002\000\004\007\321\001\002\000\004\007\320\001" +
    "\002\000\006\027\122\053\307\001\002\000\004\035\311" +
    "\001\002\000\004\007\317\001\002\000\004\005\312\001" +
    "\002\000\006\006\224\035\313\001\002\000\010\006\uffde" +
    "\013\226\053\314\001\002\000\004\035\201\001\002\000" +
    "\004\006\316\001\002\000\004\007\uffbe\001\002\000\024" +
    "\011\uffc0\014\uffc0\015\uffc0\016\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\035\uffc0\001\002\000\024\011\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\035" +
    "\uffc1\001\002\000\024\011\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\035\uffbf\001\002\000" +
    "\006\035\121\036\117\001\002\000\004\007\324\001\002" +
    "\000\024\011\uffc2\014\uffc2\015\uffc2\016\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\035\uffc2\001\002\000\004\011\326" +
    "\001\002\000\004\002\ufff7\001\002\000\006\032\330\037" +
    "\331\001\002\000\004\012\340\001\002\000\004\012\332" +
    "\001\002\000\006\012\333\035\334\001\002\000\004\007" +
    "\337\001\002\000\004\012\335\001\002\000\004\007\336" +
    "\001\002\000\030\011\uffc4\014\uffc4\015\uffc4\016\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\035\uffc4\047\uffc4" +
    "\001\002\000\030\011\uffc6\014\uffc6\015\uffc6\016\uffc6\021" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\035\uffc6\047\uffc6" +
    "\001\002\000\006\012\341\035\342\001\002\000\004\007" +
    "\345\001\002\000\004\012\343\001\002\000\004\007\344" +
    "\001\002\000\030\011\uffc3\014\uffc3\015\uffc3\016\uffc3\021" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\035\uffc3\047\uffc3" +
    "\001\002\000\030\011\uffc5\014\uffc5\015\uffc5\016\uffc5\021" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\035\uffc5\047\uffc5" +
    "\001\002\000\016\014\uffa7\015\uffa7\016\uffa7\025\uffa7\026" +
    "\uffa7\035\uffa7\001\002\000\006\035\241\040\237\001\002" +
    "\000\004\006\351\001\002\000\004\010\352\001\002\000" +
    "\016\014\167\015\162\016\154\025\156\026\013\035\165" +
    "\001\002\000\014\011\354\016\154\024\177\025\156\026" +
    "\013\001\002\000\024\011\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\035\uffaf\001\002\000" +
    "\006\035\241\040\237\001\002\000\004\006\357\001\002" +
    "\000\004\010\360\001\002\000\016\014\167\015\162\016" +
    "\154\025\156\026\013\035\165\001\002\000\014\011\362" +
    "\016\154\024\177\025\156\026\013\001\002\000\026\011" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\363\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\035\uffb7\001\002\000\004\010\364\001" +
    "\002\000\016\014\167\015\162\016\154\025\156\026\013" +
    "\035\165\001\002\000\014\011\366\016\154\024\177\025" +
    "\156\026\013\001\002\000\024\011\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\035\uffb0\001" +
    "\002\000\006\014\202\015\162\001\002\000\006\014\202" +
    "\015\162\001\002\000\004\047\160\001\002\000\006\014" +
    "\202\015\162\001\002\000\006\014\375\035\165\001\002" +
    "\000\004\011\255\001\002\000\004\035\376\001\002\000" +
    "\004\032\377\001\002\000\006\035\306\036\117\001\002" +
    "\000\004\011\u0101\001\002\000\004\011\u0102\001\002\000" +
    "\004\002\ufff8\001\002\000\004\021\u0105\001\002\000\006" +
    "\021\074\045\020\001\002\000\004\035\u0106\001\002\000" +
    "\004\005\u0107\001\002\000\004\014\u0108\001\002\000\004" +
    "\035\u0109\001\002\000\004\013\u010a\001\002\000\004\014" +
    "\u010b\001\002\000\004\035\u010c\001\002\000\004\006\u010d" +
    "\001\002\000\004\010\u010e\001\002\000\004\035\u0110\001" +
    "\002\000\004\035\u0110\001\002\000\004\032\u0111\001\002" +
    "\000\004\035\u0112\001\002\000\004\007\u0113\001\002\000" +
    "\006\011\ufff0\035\ufff0\001\002\000\004\011\u0115\001\002" +
    "\000\006\021\uffef\045\uffef\001\002\000\004\023\u0117\001" +
    "\002\000\004\035\u0118\001\002\000\004\027\u0119\001\002" +
    "\000\004\035\u011a\001\002\000\004\007\u011b\001\002\000" +
    "\004\011\u011c\001\002\000\006\021\074\045\020\001\002" +
    "\000\004\023\u011e\001\002\000\004\035\u011f\001\002\000" +
    "\004\027\u0120\001\002\000\004\035\u0121\001\002\000\004" +
    "\007\u0122\001\002\000\004\011\u0123\001\002\000\006\021" +
    "\074\045\020\001\002\000\004\023\u0125\001\002\000\004" +
    "\035\u0126\001\002\000\004\027\u0127\001\002\000\004\035" +
    "\u0128\001\002\000\004\007\u0129\001\002\000\004\011\u012a" +
    "\001\002\000\006\021\074\045\020\001\002\000\004\023" +
    "\u012c\001\002\000\004\035\u012d\001\002\000\004\027\u012e" +
    "\001\002\000\004\035\u012f\001\002\000\004\007\u0130\001" +
    "\002\000\004\011\u0131\001\002\000\006\021\074\045\020" +
    "\001\002\000\004\026\013\001\002\000\004\023\u0134\001" +
    "\002\000\004\035\u0135\001\002\000\004\007\u0136\001\002" +
    "\000\004\011\u0137\001\002\000\004\011\u0138\001\002\000" +
    "\004\002\ufff9\001\002\000\006\014\u013c\035\u013b\001\002" +
    "\000\004\006\u0150\001\002\000\004\032\u014a\001\002\000" +
    "\004\035\u013d\001\002\000\004\032\u013e\001\002\000\004" +
    "\036\u013f\001\002\000\004\007\u0140\001\002\000\006\035" +
    "\241\040\237\001\002\000\004\007\u0142\001\002\000\006" +
    "\030\u0143\035\u0145\001\002\000\004\035\u0149\001\002\000" +
    "\004\006\uffac\001\002\000\006\030\u0146\037\u0147\001\002" +
    "\000\004\006\uffa9\001\002\000\004\036\u0148\001\002\000" +
    "\004\006\uffaa\001\002\000\004\006\uffa8\001\002\000\004" +
    "\036\u014b\001\002\000\004\007\u014c\001\002\000\006\035" +
    "\241\040\237\001\002\000\004\007\u014e\001\002\000\006" +
    "\030\u0143\035\u0145\001\002\000\004\006\uffab\001\002\000" +
    "\004\010\u0151\001\002\000\016\014\167\015\162\016\154" +
    "\025\156\026\013\035\165\001\002\000\014\011\u0153\016" +
    "\154\024\177\025\156\026\013\001\002\000\026\002\uffad" +
    "\011\uffad\014\uffad\015\uffad\016\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\035\uffad\001\002\000\004\007\u0155\001\002" +
    "\000\004\021\ufff4\001\002\000\004\002\uffd9\001\002\000" +
    "\016\011\u0159\016\154\023\u0158\024\177\025\156\026\013" +
    "\001\002\000\004\035\u015a\001\002\000\004\002\uffd8\001" +
    "\002\000\004\007\u015b\001\002\000\004\011\u015c\001\002" +
    "\000\004\002\uffd7\001\002\000\006\014\202\015\162\001" +
    "\002\000\006\014\202\015\162\001\002\000\004\021\u0105" +
    "\001\002\000\006\021\074\045\020\001\002\000\004\023" +
    "\u0162\001\002\000\004\035\u0163\001\002\000\004\027\u0164" +
    "\001\002\000\004\035\u0165\001\002\000\004\007\u0166\001" +
    "\002\000\004\011\u0167\001\002\000\006\021\074\045\020" +
    "\001\002\000\004\023\u0169\001\002\000\004\035\u016a\001" +
    "\002\000\004\027\u016b\001\002\000\004\035\u016c\001\002" +
    "\000\004\007\u016d\001\002\000\004\011\u016e\001\002\000" +
    "\006\021\074\045\020\001\002\000\004\023\u0170\001\002" +
    "\000\004\035\u0171\001\002\000\004\027\u0172\001\002\000" +
    "\004\035\u0173\001\002\000\004\007\u0174\001\002\000\004" +
    "\011\u0175\001\002\000\006\021\074\045\020\001\002\000" +
    "\004\023\u0177\001\002\000\004\035\u0178\001\002\000\004" +
    "\027\u0179\001\002\000\004\035\u017a\001\002\000\004\007" +
    "\u017b\001\002\000\004\011\u017c\001\002\000\006\021\074" +
    "\045\020\001\002\000\004\026\013\001\002\000\004\023" +
    "\u017f\001\002\000\004\035\u0180\001\002\000\004\007\u0181" +
    "\001\002\000\004\011\u0182\001\002\000\004\011\u0183\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\001\001\002" +
    "\000\006\007\u0186\053\u0187\001\002\000\004\021\ufff3\001" +
    "\002\000\004\035\u0188\001\002\000\004\053\u0189\001\002" +
    "\000\004\027\u018a\001\002\000\004\007\u018b\001\002\000" +
    "\004\021\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\032\002\005\003\023\004\006\005\015\010" +
    "\007\021\003\024\022\026\020\030\016\034\014\035\021" +
    "\041\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u015c\001\001\000\020\011\u0156" +
    "\012\156\013\165\015\162\016\160\017\152\021\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\367\012" +
    "\366\024\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\034\027\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\042\001\001\000\004\027\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\060\027\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\063" +
    "\027\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\072\024\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\074\001\001\000\002\001\001\000\004\037\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\163\012\156\013\165\015\162\016\160" +
    "\017\152\021\154\031\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\177\016\175\017\171\020\202\021\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\170\012\156\013\165\015\162\016\160\017" +
    "\152\021\154\001\001\000\020\012\174\015\177\016\175" +
    "\017\171\020\202\021\173\040\172\001\001\000\002\001" +
    "\001\000\004\032\272\001\001\000\002\001\001\000\004" +
    "\040\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\232\012\156\013\165\015\162" +
    "\016\160\017\152\021\154\001\001\000\014\015\177\016" +
    "\175\017\171\020\202\021\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\257\024\022\001\001\000\004\036\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\274\024\022\001\001\000" +
    "\004\036\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\304\042" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\222\001\001" +
    "\000\002\001\001\000\004\040\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\352\012\156\013\165\015\162\016\160\017" +
    "\152\021\154\001\001\000\014\015\177\016\175\017\171" +
    "\020\202\021\173\001\001\000\002\001\001\000\004\022" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\360\012\156\013\165\015\162\016\160\017\152\021" +
    "\154\001\001\000\014\015\177\016\175\017\171\020\202" +
    "\021\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\364\012\156\013\165\015\162\016\160\017\152" +
    "\021\154\001\001\000\014\015\177\016\175\017\171\020" +
    "\202\021\173\001\001\000\002\001\001\000\004\012\u0102" +
    "\001\001\000\004\012\370\001\001\000\004\031\371\001" +
    "\001\000\004\012\372\001\001\000\004\013\373\001\001" +
    "\000\004\032\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\304\042\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0103\001" +
    "\001\000\006\010\u0115\024\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u010e\001\001\000" +
    "\004\006\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u011c\024\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u0123\024\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u012a\024\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\u0131\024\022\001" +
    "\001\000\004\021\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0140" +
    "\001\001\000\002\001\001\000\004\014\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u014c" +
    "\001\001\000\002\001\001\000\004\014\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\u0151\012\156" +
    "\013\165\015\162\016\160\017\152\021\154\001\001\000" +
    "\014\015\177\016\175\017\171\020\202\021\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\177\016\175\017\171\020\202" +
    "\021\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u015d\001\001\000\004\012\u015e\001\001\000\004\007" +
    "\u015f\001\001\000\006\010\u0160\024\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\u0167" +
    "\024\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u016e\024\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u0175\024" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u017c\024\022\001\001\000\004\021\u017d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FINAL_BLOQUE_TRY_CATCH ::= LlaveC Catch ParentecisA exception Identificador ParentecisC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINAL_BLOQUE_TRY_CATCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INICIO_BLOQUE_TRY_CATCH ::= Try LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_BLOQUE_TRY_CATCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION_FOR ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION_FOR ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_FOR ::= Identificador Atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_FOR ::= Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_FOR ::= TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador Relacionales Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_ARITMETICA ::= Numero OperadorAritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_ARITMETICA ::= Identificador OperadorAritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADO_METODO ::= Identificador ParentecisA ARGUMENTS ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLAMADO_METODO ::= Identificador ParentecisA ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO_METODO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARSE_DATA ::= Identificador Punto Identificador ParentecisA Identificador Punto LLAMADO_METODO ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARSE_DATA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion PARSE_DATA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion Identificador Punto LLAMADO_METODO FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_ASIGNACION ::= TipoDato Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_ASIGNACION ::= Identificador Asignacion OPERACION_ARITMETICA FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= string Identificador Asignacion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= string Identificador Atribucion Comillas Identificador Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= string Identificador Asignacion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= string Identificador Atribucion Comillas Comillas FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= TipoDato Incremento Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= TipoDato Identificador Incremento FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= TipoDato Identificador Asignacion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= TipoDato Identificador Atribucion Numero FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= TipoDato Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO ::= INICIO_METODO SENTENCIA Return Identificador FinalLinea LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO ::= INICIO_METODO SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO ::= INICIO_METODO LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTANCIACION_CLASE ::= Identificador Identificador Asignacion New Identificador ParentecisA New Identificador ParentecisA Identificador Punto Identificador ParentecisC ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CLASE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINT ::= Identificador Punto Identificador Punto Identificador ParentecisA Comillas Identificador Identificador Identificador Comillas OperadorAritmetico ParentecisA OPERACION_ARITMETICA ParentecisC ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINT ::= Identificador Punto Identificador Punto Identificador ParentecisA Comillas Identificador Identificador Identificador Identificador Comillas ParentecisC FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGUMENTS ::= Identificador Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGUMENTS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETERS_A ::= string CorcheteA CorcheteC Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETERS_A ::= string CorcheteA CorcheteC Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETERS_A ::= string Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETERS_A ::= string Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETERS_A ::= TipoDato Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETERS_A ::= TipoDato Identificador ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETERS_A ::= ParentecisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS_A",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETERS ::= PARAMETERS_A PARAMETERS_A PARAMETERS_A PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETERS ::= PARAMETERS_A PARAMETERS_A PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETERS ::= PARAMETERS_A PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETERS ::= PARAMETERS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO_METODO ::= ACCESO_METODO Static Void Identificador ParentecisA PARAMETERS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO_METODO ::= ACCESO_METODO Static Void Main ParentecisA PARAMETERS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO_METODO ::= ACCESO_METODO TipoDato Identificador ParentecisA PARAMETERS LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ACCESO_METODO ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ACCESO_METODO ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESO_METODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONSTRUCTOR ::= Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= Identificador Asignacion Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO_CLASE ::= Public Class Identificador LlaveA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPORT ::= Import Identificador Punto Identificador Punto OperadorAritmetico FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPORT ::= Import Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PACKAGE_PATH ::= Package Identificador FinalLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PACKAGE_PATH",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EJEMPLO_3 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE INICIO_BLOQUE_TRY_CATCH SENTENCIA DECLARACION LLAMADO_METODO FINAL_BLOQUE_TRY_CATCH LlaveC INICIO_METODO PRINT LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_3",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EJEMPLO_3 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE INICIO_BLOQUE_TRY_CATCH SENTENCIA LLAMADO_METODO FINAL_BLOQUE_TRY_CATCH LlaveC INICIO_METODO PRINT LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_3",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EJEMPLO_2 ::= IMPORT INICIO_CLASE INICIO_METODO PRINT INSTANCIACION_CLASE SENTENCIA LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EJEMPLO_1 ::= INICIO_CLASE INICIO_METODO DECLARACION INICIO_BLOQUE_TRY_CATCH DECLARACION DECLARACION_ASIGNACION FINAL_BLOQUE_TRY_CATCH LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJEMPLO_1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASS ::= INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASS ::= PACKAGE_PATH INICIO_CLASE DECLARACION DECLARACION CONSTRUCTOR INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC INICIO_METODO FOR Return Identificador FinalLinea LlaveC LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROG ::= EJEMPLO_3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROG ::= EJEMPLO_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROG ::= EJEMPLO_1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

