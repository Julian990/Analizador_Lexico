package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, ParentecisA, ParentecisC, FinalLinea, LlaveA, LlaveC, Comillas, Coma, TipoDato, string, If, Else, Package, Public, Class, Return, Do, While, For, OperadorAritmetico, Incremento, Decremento, Asignacion, Relacionales, OperadorLogico, Identificador, Numero, Atribucion, Booleano, CorcheteA, CorcheteC, Static, Void, Private, Main, Try, Catch, exception, Import, Punto, New, ERROR;
non terminal PROG, CLASS, PACKAGE_PATH, INICIO_CLASE, ASIGNACION, CONSTRUCTOR, INICIO_METODO, SENTENCIA, DECLARACION, DECLARACION_ASIGNACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, ACCESO_METODO, PARAMETERS, METODO, PARAMETERS_A, EJEMPLO_1, INICIO_BLOQUE_TRY_CATCH, FINAL_BLOQUE_TRY_CATCH,
    OPERACION_ARITMETICA, EJEMPLO_2, IMPORT, PRINT, INSTANCIACION_CLASE, LLAMADO_METODO,
    EJEMPLO_3, PARSE_DATA, ARGUMENTS;

start with PROG;

PROG ::=
    CLASS | FOR | METODO | EJEMPLO_1 | EJEMPLO_2 | EJEMPLO_3
;

CLASS ::=
    PACKAGE_PATH 
    INICIO_CLASE 
    DECLARACION 
    DECLARACION 
    CONSTRUCTOR 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO FOR Return Identificador FinalLinea LlaveC
    LlaveC | 
    INICIO_CLASE 
    DECLARACION 
    DECLARACION 
    CONSTRUCTOR 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO Return Identificador OperadorAritmetico Identificador FinalLinea LlaveC 
    INICIO_METODO FOR Return Identificador FinalLinea LlaveC
    LlaveC
;

EJEMPLO_1 ::=
    INICIO_CLASE
    INICIO_METODO
    DECLARACION
    INICIO_BLOQUE_TRY_CATCH
    DECLARACION
    DECLARACION_ASIGNACION
    FINAL_BLOQUE_TRY_CATCH
    LlaveC
    LlaveC
;

EJEMPLO_2 ::=
    IMPORT
    INICIO_CLASE
    INICIO_METODO
    PRINT
    INSTANCIACION_CLASE
    SENTENCIA
    LlaveC
    LlaveC
;

EJEMPLO_3 ::=
    IMPORT
    INICIO_CLASE
    INICIO_METODO
    PRINT
    INSTANCIACION_CLASE
    INICIO_BLOQUE_TRY_CATCH
    SENTENCIA
    LLAMADO_METODO
    FINAL_BLOQUE_TRY_CATCH
    LlaveC
    INICIO_METODO
    PRINT
    LlaveC
    LlaveC
    |
    IMPORT
    INICIO_CLASE
    INICIO_METODO
    PRINT
    INSTANCIACION_CLASE
    INICIO_BLOQUE_TRY_CATCH
    SENTENCIA
    DECLARACION
    LLAMADO_METODO
    FINAL_BLOQUE_TRY_CATCH
    LlaveC
    INICIO_METODO
    PRINT
    LlaveC
    LlaveC
;

PACKAGE_PATH ::=
    Package Identificador FinalLinea
;

IMPORT ::=
    Import Identificador FinalLinea |
    Import Identificador Punto Identificador Punto OperadorAritmetico FinalLinea
;

INICIO_CLASE ::= 
    Public Class Identificador LlaveA 
;

ASIGNACION ::=
    Identificador Asignacion Identificador FinalLinea
;

CONSTRUCTOR ::=
    Public Identificador ParentecisA TipoDato Identificador Coma TipoDato Identificador ParentecisC LlaveA ASIGNACION ASIGNACION LlaveC
;

ACCESO_METODO ::=
    Public | Private
;

INICIO_METODO ::=
    ACCESO_METODO TipoDato Identificador ParentecisA PARAMETERS LlaveA |
    ACCESO_METODO Static Void Main ParentecisA PARAMETERS LlaveA |
    ACCESO_METODO Static Void Identificador ParentecisA PARAMETERS LlaveA
;

PARAMETERS ::=
    PARAMETERS_A |
    PARAMETERS_A PARAMETERS_A |
    PARAMETERS_A PARAMETERS_A PARAMETERS_A |
    PARAMETERS_A PARAMETERS_A PARAMETERS_A PARAMETERS_A
;

PARAMETERS_A ::=
    ParentecisC |
    TipoDato Identificador ParentecisC |
    TipoDato Identificador Coma |
    string Identificador ParentecisC |
    string Identificador Coma |
    string CorcheteA CorcheteC Identificador ParentecisC |
    string CorcheteA CorcheteC Identificador Coma 
;

ARGUMENTS ::=
    Identificador |
    Identificador Coma Identificador 
;

PRINT ::=
    Identificador Punto Identificador Punto Identificador
    ParentecisA Comillas Identificador Identificador Identificador Identificador Comillas ParentecisC
    FinalLinea |
    Identificador Punto Identificador Punto Identificador
    ParentecisA Comillas Identificador Identificador Identificador Comillas
    OperadorAritmetico ParentecisA OPERACION_ARITMETICA ParentecisC ParentecisC FinalLinea
;

INSTANCIACION_CLASE ::=
    Identificador Identificador Asignacion 
    New Identificador ParentecisA
    New Identificador ParentecisA
    Identificador Punto Identificador
    ParentecisC ParentecisC FinalLinea
;

METODO ::=
    INICIO_METODO LlaveC |
    INICIO_METODO SENTENCIA LlaveC |
    INICIO_METODO SENTENCIA Return Identificador FinalLinea LlaveC 
;

SENTENCIA ::= 
    DECLARACION_ASIGNACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;

DECLARACION ::= 
    TipoDato Identificador FinalLinea | 
    TipoDato Identificador Atribucion Numero FinalLinea |
    TipoDato Identificador Asignacion Numero FinalLinea |
    TipoDato Identificador Incremento FinalLinea | 
    TipoDato Incremento Identificador FinalLinea | 
    string Identificador Atribucion Comillas Comillas FinalLinea |
    string Identificador Asignacion Comillas Comillas FinalLinea |
    string Identificador Atribucion Comillas Identificador Comillas FinalLinea |
    string Identificador Asignacion Comillas Identificador Comillas FinalLinea
;

DECLARACION_ASIGNACION ::=
    Identificador Asignacion OPERACION_ARITMETICA FinalLinea |
    TipoDato Identificador Asignacion OPERACION_ARITMETICA FinalLinea |
    TipoDato Identificador Asignacion Identificador Punto LLAMADO_METODO FinalLinea |
    TipoDato Identificador Asignacion PARSE_DATA FinalLinea
;

PARSE_DATA ::=
    Identificador Punto Identificador 
    ParentecisA 
    Identificador Punto LLAMADO_METODO
    ParentecisC
;

LLAMADO_METODO ::=
    Identificador ParentecisA ParentecisC |
    Identificador ParentecisA ARGUMENTS ParentecisC FinalLinea
;

OPERACION_ARITMETICA ::=
    Identificador OperadorAritmetico Identificador |
    Numero OperadorAritmetico Numero |
    Identificador OperadorAritmetico Numero |
    Numero OperadorAritmetico Identificador
;

IF ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC
;

SENTENCIA_BOOLEANA ::= 
    Booleano | 
    Identificador Relacionales Booleano |
    Identificador Relacionales Numero |
    Identificador Relacionales Identificador |
    Identificador Relacionales Comillas Comillas |
    Identificador Relacionales Comillas Identificador Comillas
;

IF_ELSE ::= If ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC
;

WHILE ::= While ParentecisA SENTENCIA_BOOLEANA ParentecisC LlaveA SENTENCIA LlaveC
;

DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentecisA SENTENCIA_BOOLEANA ParentecisC FinalLinea
;

FOR ::= For ParentecisA SENTENCIA_FOR ParentecisC LlaveA SENTENCIA LlaveC
;

SENTENCIA_FOR ::=
    TipoDato Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR |
    Identificador Asignacion Numero FinalLinea SENTENCIA_BOOLEANA FinalLinea DECLARACION_FOR
;

DECLARACION_FOR ::= 
    Identificador Atribucion Numero |
    Identificador Incremento | 
    Incremento Identificador
;

INICIO_BLOQUE_TRY_CATCH ::=
    Try LlaveA
;

FINAL_BLOQUE_TRY_CATCH ::=
    LlaveC Catch ParentecisA 
    exception Identificador 
    ParentecisC LlaveA LlaveC
;

